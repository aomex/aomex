// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`transform mongodb > .d.ts 1`] = `
"import {
  AnyOfValidator,
  ArrayValidator,
  BigIntValidator,
  BooleanValidator,
  BufferValidator,
  DateTimeValidator,
  EnumValidator,
  IntValidator,
  NumberValidator,
  ObjectValidator,
  StringValidator,
  UuidValidator,
  Validator,
} from "@aomex/common";
declare const userInputColumns: {
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`auto()\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  id: StringValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: StringValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  name_nu: StringValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`"abc"\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  name_de: StringValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String[]\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.array(rule.string())\`
   */
  str_arr: ArrayValidator<string[]>;
  /**
   * Prisma类型：\`String[]\`
   *
   * 数据库默认值：\`[]\`
   *
   * 运行时规则：\`rule.array(rule.string()).optional()\`
   */
  str_arr_de: ArrayValidator<string[] | Validator.TOptional>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  age: IntValidator<number>;
  /**
   * Prisma类型：\`Int?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  age_nu: IntValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  age_de: IntValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Int[]\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.array(rule.int())\`
   */
  int_arr: ArrayValidator<number[]>;
  /**
   * Prisma类型：\`Int[]\`
   *
   * 数据库默认值：\`[]\`
   *
   * 运行时规则：\`rule.array(rule.int()).optional()\`
   */
  int_arr_de: ArrayValidator<number[] | Validator.TOptional>;
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj: AnyOfValidator<
    | unknown[]
    | {
        [K: string]: unknown;
      }
  >;
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"{}"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()]).optional()\`
   */
  obj_de_obj: AnyOfValidator<
    | unknown[]
    | Validator.TOptional
    | {
        [K: string]: unknown;
      }
  >;
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"[]"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()]).optional()\`
   */
  obj_de_arr: AnyOfValidator<
    | unknown[]
    | Validator.TOptional
    | {
        [K: string]: unknown;
      }
  >;
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  flo: NumberValidator<number>;
  /**
   * Prisma类型：\`Float?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  flo_nu: NumberValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：\`100.10000000000001\`
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  flo_de: NumberValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Float[]\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.array(rule.number())\`
   */
  flo_arr: ArrayValidator<number[]>;
  /**
   * Prisma类型：\`Float[]\`
   *
   * 数据库默认值：\`[100.10000000000001]\`
   *
   * 运行时规则：\`rule.array(rule.number()).optional()\`
   */
  flo_arr_de: ArrayValidator<number[] | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`uuid(4)\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
   *
   * I am the comments
   */
  comme_ok: StringValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  comme_fail: StringValidator<string>;
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  lang: EnumValidator<
    "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp"
  >;
  /**
   * Prisma类型：\`Language?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum).optional()\`
   */
  lang_nu: EnumValidator<
    | Validator.TOptional
    | "Typescript"
    | "Javascript"
    | "Rust"
    | "Go"
    | "Python"
    | "Cpp"
  >;
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：\`"Typescript"\`
   *
   * 运行时规则：\`rule.enum(LanguageEnum).optional()\`
   */
  lang_de: EnumValidator<
    | Validator.TOptional
    | "Typescript"
    | "Javascript"
    | "Rust"
    | "Go"
    | "Python"
    | "Cpp"
  >;
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time: DateTimeValidator<Date>;
  /**
   * Prisma类型：\`DateTime?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime().optional()\`
   */
  time_nu: DateTimeValidator<Validator.TOptional | Date>;
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：\`now()\`
   *
   * 运行时规则：\`rule.dateTime().optional()\`
   */
  time_de: DateTimeValidator<Validator.TOptional | Date>;
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo: BooleanValidator<boolean>;
  /**
   * Prisma类型：\`Boolean?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean().optional()\`
   */
  boo_nu: BooleanValidator<boolean | Validator.TOptional>;
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：\`true\`
   *
   * 运行时规则：\`rule.boolean().optional()\`
   */
  boo_de: BooleanValidator<boolean | Validator.TOptional>;
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big: BigIntValidator<bigint>;
  /**
   * Prisma类型：\`BigInt?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint().optional()\`
   */
  big_nu: BigIntValidator<bigint | Validator.TOptional>;
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：\`"30"\`
   *
   * 运行时规则：\`rule.bigint().optional()\`
   */
  big_de: BigIntValidator<bigint | Validator.TOptional>;
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt: BufferValidator<Buffer>;
  /**
   * Prisma类型：\`Bytes?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer().optional()\`
   */
  byt_nu: BufferValidator<Validator.TOptional | Buffer>;
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：\`""\`
   *
   * 运行时规则：\`rule.buffer().optional()\`
   */
  byt_de: BufferValidator<Validator.TOptional | Buffer>;
  /**
   * Prisma类型：\`MyType\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.object(MyTypeType)\`
   */
  custom: ObjectValidator<{
    id: number;
    name: string;
    other: {
      cde: "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp";
    } & {
      abc?: string | undefined;
    };
  }>;
  /**
   * Prisma类型：\`MyType?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.object(MyTypeType).optional()\`
   */
  custom_nu: ObjectValidator<
    | Validator.TOptional
    | {
        id: number;
        name: string;
        other: {
          cde: "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp";
        } & {
          abc?: string | undefined;
        };
      }
  >;
  /**
   * Prisma类型：\`MyType[]\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.array(MyTypeType)\`
   */
  custom_arr: ArrayValidator<
    {
      id: number;
      name: string;
      other: {
        cde: "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp";
      } & {
        abc?: string | undefined;
      };
    }[]
  >;
};
declare const userOutputColumns: {
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`auto()\`
   *
   * 运行时规则：\`rule.string()\`
   */
  id: StringValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: StringValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().nullable()\`
   */
  name_nu: StringValidator<string | null>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`"abc"\`
   *
   * 运行时规则：\`rule.string()\`
   */
  name_de: StringValidator<string>;
  /**
   * Prisma类型：\`String[]\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.array(rule.string())\`
   */
  str_arr: ArrayValidator<string[]>;
  /**
   * Prisma类型：\`String[]\`
   *
   * 数据库默认值：\`[]\`
   *
   * 运行时规则：\`rule.array(rule.string())\`
   */
  str_arr_de: ArrayValidator<string[]>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  age: IntValidator<number>;
  /**
   * Prisma类型：\`Int?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int().nullable()\`
   */
  age_nu: IntValidator<number | null>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.int()\`
   */
  age_de: IntValidator<number>;
  /**
   * Prisma类型：\`Int[]\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.array(rule.int())\`
   */
  int_arr: ArrayValidator<number[]>;
  /**
   * Prisma类型：\`Int[]\`
   *
   * 数据库默认值：\`[]\`
   *
   * 运行时规则：\`rule.array(rule.int())\`
   */
  int_arr_de: ArrayValidator<number[]>;
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj: AnyOfValidator<
    | unknown[]
    | {
        [K: string]: unknown;
      }
  >;
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"{}"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj_de_obj: AnyOfValidator<
    | unknown[]
    | {
        [K: string]: unknown;
      }
  >;
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"[]"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj_de_arr: AnyOfValidator<
    | unknown[]
    | {
        [K: string]: unknown;
      }
  >;
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  flo: NumberValidator<number>;
  /**
   * Prisma类型：\`Float?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().nullable()\`
   */
  flo_nu: NumberValidator<number | null>;
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：\`100.10000000000001\`
   *
   * 运行时规则：\`rule.number()\`
   */
  flo_de: NumberValidator<number>;
  /**
   * Prisma类型：\`Float[]\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.array(rule.number())\`
   */
  flo_arr: ArrayValidator<number[]>;
  /**
   * Prisma类型：\`Float[]\`
   *
   * 数据库默认值：\`[100.10000000000001]\`
   *
   * 运行时规则：\`rule.array(rule.number())\`
   */
  flo_arr_de: ArrayValidator<number[]>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`uuid(4)\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
   *
   * I am the comments
   */
  comme_ok: StringValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  comme_fail: StringValidator<string>;
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  lang: EnumValidator<
    "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp"
  >;
  /**
   * Prisma类型：\`Language?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum).nullable()\`
   */
  lang_nu: EnumValidator<
    "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp" | null
  >;
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：\`"Typescript"\`
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  lang_de: EnumValidator<
    "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp"
  >;
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time: DateTimeValidator<Date>;
  /**
   * Prisma类型：\`DateTime?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime().nullable()\`
   */
  time_nu: DateTimeValidator<Date | null>;
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：\`now()\`
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time_de: DateTimeValidator<Date>;
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo: BooleanValidator<boolean>;
  /**
   * Prisma类型：\`Boolean?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean().nullable()\`
   */
  boo_nu: BooleanValidator<boolean | null>;
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：\`true\`
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo_de: BooleanValidator<boolean>;
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big: BigIntValidator<bigint>;
  /**
   * Prisma类型：\`BigInt?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint().nullable()\`
   */
  big_nu: BigIntValidator<bigint | null>;
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：\`"30"\`
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big_de: BigIntValidator<bigint>;
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt: BufferValidator<Buffer>;
  /**
   * Prisma类型：\`Bytes?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer().nullable()\`
   */
  byt_nu: BufferValidator<Buffer | null>;
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：\`""\`
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt_de: BufferValidator<Buffer>;
  /**
   * Prisma类型：\`MyType\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.object(MyTypeType)\`
   */
  custom: ObjectValidator<{
    id: number;
    name: string;
    other: {
      cde: "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp";
    } & {
      abc?: string | undefined;
    };
  }>;
  /**
   * Prisma类型：\`MyType?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.object(MyTypeType).nullable()\`
   */
  custom_nu: ObjectValidator<{
    id: number;
    name: string;
    other: {
      cde: "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp";
    } & {
      abc?: string | undefined;
    };
  } | null>;
  /**
   * Prisma类型：\`MyType[]\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.array(MyTypeType)\`
   */
  custom_arr: ArrayValidator<
    {
      id: number;
      name: string;
      other: {
        cde: "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp";
      } & {
        abc?: string | undefined;
      };
    }[]
  >;
};
declare const profileInputColumns: {
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`auto()\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  id: StringValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  user_id: StringValidator<string>;
};
declare const profileOutputColumns: {
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`auto()\`
   *
   * 运行时规则：\`rule.string()\`
   */
  id: StringValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  user_id: StringValidator<string>;
};
declare const postInputColumns: {
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`auto()\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  id: StringValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  user_id: StringValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: StringValidator<string>;
};
declare const postOutputColumns: {
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`auto()\`
   *
   * 运行时规则：\`rule.string()\`
   */
  id: StringValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  user_id: StringValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: StringValidator<string>;
};
declare const aliasTableNameInputColumns: {
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`auto()\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  id: StringValidator<string | Validator.TOptional>;
};
declare const aliasTableNameOutputColumns: {
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`auto()\`
   *
   * 运行时规则：\`rule.string()\`
   */
  id: StringValidator<string>;
};

export declare const prismaInput: {
  readonly user: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`auto()\`
       *
       * 运行时规则：\`rule.string().optional()\`
       */
      id: StringValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      name: StringValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string().optional()\`
       */
      name_nu: StringValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`"abc"\`
       *
       * 运行时规则：\`rule.string().optional()\`
       */
      name_de: StringValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String[]\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.array(rule.string())\`
       */
      str_arr: ArrayValidator<string[]>;
      /**
       * Prisma类型：\`String[]\`
       *
       * 数据库默认值：\`[]\`
       *
       * 运行时规则：\`rule.array(rule.string()).optional()\`
       */
      str_arr_de: ArrayValidator<string[] | Validator.TOptional>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      age: IntValidator<number>;
      /**
       * Prisma类型：\`Int?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      age_nu: IntValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`100\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      age_de: IntValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Int[]\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.array(rule.int())\`
       */
      int_arr: ArrayValidator<number[]>;
      /**
       * Prisma类型：\`Int[]\`
       *
       * 数据库默认值：\`[]\`
       *
       * 运行时规则：\`rule.array(rule.int()).optional()\`
       */
      int_arr_de: ArrayValidator<number[] | Validator.TOptional>;
      /**
       * Prisma类型：\`Json\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
       */
      obj: AnyOfValidator<
        | unknown[]
        | {
            [K: string]: unknown;
          }
      >;
      /**
       * Prisma类型：\`Json\`
       *
       * 数据库默认值：\`"{}"\`
       *
       * 运行时规则：\`rule.anyOf([rule.object(), rule.array()]).optional()\`
       */
      obj_de_obj: AnyOfValidator<
        | unknown[]
        | Validator.TOptional
        | {
            [K: string]: unknown;
          }
      >;
      /**
       * Prisma类型：\`Json\`
       *
       * 数据库默认值：\`"[]"\`
       *
       * 运行时规则：\`rule.anyOf([rule.object(), rule.array()]).optional()\`
       */
      obj_de_arr: AnyOfValidator<
        | unknown[]
        | Validator.TOptional
        | {
            [K: string]: unknown;
          }
      >;
      /**
       * Prisma类型：\`Float\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number()\`
       */
      flo: NumberValidator<number>;
      /**
       * Prisma类型：\`Float?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number().optional()\`
       */
      flo_nu: NumberValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Float\`
       *
       * 数据库默认值：\`100.10000000000001\`
       *
       * 运行时规则：\`rule.number().optional()\`
       */
      flo_de: NumberValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Float[]\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.array(rule.number())\`
       */
      flo_arr: ArrayValidator<number[]>;
      /**
       * Prisma类型：\`Float[]\`
       *
       * 数据库默认值：\`[100.10000000000001]\`
       *
       * 运行时规则：\`rule.array(rule.number()).optional()\`
       */
      flo_arr_de: ArrayValidator<number[] | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`uuid(4)\`
       *
       * 运行时规则：\`rule.uuid(["v4"]).optional()\`
       */
      uu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
       *
       * I am the comments
       */
      comme_ok: StringValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      comme_fail: StringValidator<string>;
      /**
       * Prisma类型：\`Language\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.enum(LanguageEnum)\`
       */
      lang: EnumValidator<
        "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp"
      >;
      /**
       * Prisma类型：\`Language?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.enum(LanguageEnum).optional()\`
       */
      lang_nu: EnumValidator<
        | Validator.TOptional
        | "Typescript"
        | "Javascript"
        | "Rust"
        | "Go"
        | "Python"
        | "Cpp"
      >;
      /**
       * Prisma类型：\`Language\`
       *
       * 数据库默认值：\`"Typescript"\`
       *
       * 运行时规则：\`rule.enum(LanguageEnum).optional()\`
       */
      lang_de: EnumValidator<
        | Validator.TOptional
        | "Typescript"
        | "Javascript"
        | "Rust"
        | "Go"
        | "Python"
        | "Cpp"
      >;
      /**
       * Prisma类型：\`DateTime\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.dateTime()\`
       */
      time: DateTimeValidator<Date>;
      /**
       * Prisma类型：\`DateTime?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.dateTime().optional()\`
       */
      time_nu: DateTimeValidator<Validator.TOptional | Date>;
      /**
       * Prisma类型：\`DateTime\`
       *
       * 数据库默认值：\`now()\`
       *
       * 运行时规则：\`rule.dateTime().optional()\`
       */
      time_de: DateTimeValidator<Validator.TOptional | Date>;
      /**
       * Prisma类型：\`Boolean\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.boolean()\`
       */
      boo: BooleanValidator<boolean>;
      /**
       * Prisma类型：\`Boolean?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.boolean().optional()\`
       */
      boo_nu: BooleanValidator<boolean | Validator.TOptional>;
      /**
       * Prisma类型：\`Boolean\`
       *
       * 数据库默认值：\`true\`
       *
       * 运行时规则：\`rule.boolean().optional()\`
       */
      boo_de: BooleanValidator<boolean | Validator.TOptional>;
      /**
       * Prisma类型：\`BigInt\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.bigint()\`
       */
      big: BigIntValidator<bigint>;
      /**
       * Prisma类型：\`BigInt?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.bigint().optional()\`
       */
      big_nu: BigIntValidator<bigint | Validator.TOptional>;
      /**
       * Prisma类型：\`BigInt\`
       *
       * 数据库默认值：\`"30"\`
       *
       * 运行时规则：\`rule.bigint().optional()\`
       */
      big_de: BigIntValidator<bigint | Validator.TOptional>;
      /**
       * Prisma类型：\`Bytes\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.buffer()\`
       */
      byt: BufferValidator<Buffer>;
      /**
       * Prisma类型：\`Bytes?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.buffer().optional()\`
       */
      byt_nu: BufferValidator<Validator.TOptional | Buffer>;
      /**
       * Prisma类型：\`Bytes\`
       *
       * 数据库默认值：\`""\`
       *
       * 运行时规则：\`rule.buffer().optional()\`
       */
      byt_de: BufferValidator<Validator.TOptional | Buffer>;
      /**
       * Prisma类型：\`MyType\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.object(MyTypeType)\`
       */
      custom: ObjectValidator<{
        id: number;
        name: string;
        other: {
          cde: "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp";
        } & {
          abc?: string | undefined;
        };
      }>;
      /**
       * Prisma类型：\`MyType?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.object(MyTypeType).optional()\`
       */
      custom_nu: ObjectValidator<
        | Validator.TOptional
        | {
            id: number;
            name: string;
            other: {
              cde:
                | "Typescript"
                | "Javascript"
                | "Rust"
                | "Go"
                | "Python"
                | "Cpp";
            } & {
              abc?: string | undefined;
            };
          }
      >;
      /**
       * Prisma类型：\`MyType[]\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.array(MyTypeType)\`
       */
      custom_arr: ArrayValidator<
        {
          id: number;
          name: string;
          other: {
            cde: "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp";
          } & {
            abc?: string | undefined;
          };
        }[]
      >;
    };
    /** 选择部分字段 */
    readonly pick: <
      Keys extends
        | "id"
        | "name"
        | "name_nu"
        | "name_de"
        | "str_arr"
        | "str_arr_de"
        | "age"
        | "age_nu"
        | "age_de"
        | "int_arr"
        | "int_arr_de"
        | "obj"
        | "obj_de_obj"
        | "obj_de_arr"
        | "flo"
        | "flo_nu"
        | "flo_de"
        | "flo_arr"
        | "flo_arr_de"
        | "uu"
        | "comme_ok"
        | "comme_fail"
        | "lang"
        | "lang_nu"
        | "lang_de"
        | "time"
        | "time_nu"
        | "time_de"
        | "boo"
        | "boo_nu"
        | "boo_de"
        | "big"
        | "big_nu"
        | "big_de"
        | "byt"
        | "byt_nu"
        | "byt_de",
    >(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof userInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <
      Keys extends
        | "id"
        | "name"
        | "name_nu"
        | "name_de"
        | "str_arr"
        | "str_arr_de"
        | "age"
        | "age_nu"
        | "age_de"
        | "int_arr"
        | "int_arr_de"
        | "obj"
        | "obj_de_obj"
        | "obj_de_arr"
        | "flo"
        | "flo_nu"
        | "flo_de"
        | "flo_arr"
        | "flo_arr_de"
        | "uu"
        | "comme_ok"
        | "comme_fail"
        | "lang"
        | "lang_nu"
        | "lang_de"
        | "time"
        | "time_nu"
        | "time_de"
        | "boo"
        | "boo_nu"
        | "boo_de"
        | "big"
        | "big_nu"
        | "big_de"
        | "byt"
        | "byt_nu"
        | "byt_de",
    >(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof userInputColumns as K extends Keys
        ? never
        : K]: (typeof userInputColumns)[K];
    };
  };
  readonly profile: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`auto()\`
       *
       * 运行时规则：\`rule.string().optional()\`
       */
      id: StringValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      user_id: StringValidator<string>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id" | "user_id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof profileInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id" | "user_id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof profileInputColumns as K extends Keys
        ? never
        : K]: (typeof profileInputColumns)[K];
    };
  };
  readonly post: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`auto()\`
       *
       * 运行时规则：\`rule.string().optional()\`
       */
      id: StringValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      user_id: StringValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      name: StringValidator<string>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id" | "user_id" | "name">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof postInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id" | "user_id" | "name">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof postInputColumns as K extends Keys
        ? never
        : K]: (typeof postInputColumns)[K];
    };
  };
  readonly aliasTableName: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`auto()\`
       *
       * 运行时规则：\`rule.string().optional()\`
       */
      id: StringValidator<string | Validator.TOptional>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof aliasTableNameInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof aliasTableNameInputColumns as K extends Keys
        ? never
        : K]: (typeof aliasTableNameInputColumns)[K];
    };
  };
};

export declare const prismaOutput: {
  readonly user: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`auto()\`
       *
       * 运行时规则：\`rule.string()\`
       */
      id: StringValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      name: StringValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string().nullable()\`
       */
      name_nu: StringValidator<string | null>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`"abc"\`
       *
       * 运行时规则：\`rule.string()\`
       */
      name_de: StringValidator<string>;
      /**
       * Prisma类型：\`String[]\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.array(rule.string())\`
       */
      str_arr: ArrayValidator<string[]>;
      /**
       * Prisma类型：\`String[]\`
       *
       * 数据库默认值：\`[]\`
       *
       * 运行时规则：\`rule.array(rule.string())\`
       */
      str_arr_de: ArrayValidator<string[]>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      age: IntValidator<number>;
      /**
       * Prisma类型：\`Int?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int().nullable()\`
       */
      age_nu: IntValidator<number | null>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`100\`
       *
       * 运行时规则：\`rule.int()\`
       */
      age_de: IntValidator<number>;
      /**
       * Prisma类型：\`Int[]\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.array(rule.int())\`
       */
      int_arr: ArrayValidator<number[]>;
      /**
       * Prisma类型：\`Int[]\`
       *
       * 数据库默认值：\`[]\`
       *
       * 运行时规则：\`rule.array(rule.int())\`
       */
      int_arr_de: ArrayValidator<number[]>;
      /**
       * Prisma类型：\`Json\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
       */
      obj: AnyOfValidator<
        | unknown[]
        | {
            [K: string]: unknown;
          }
      >;
      /**
       * Prisma类型：\`Json\`
       *
       * 数据库默认值：\`"{}"\`
       *
       * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
       */
      obj_de_obj: AnyOfValidator<
        | unknown[]
        | {
            [K: string]: unknown;
          }
      >;
      /**
       * Prisma类型：\`Json\`
       *
       * 数据库默认值：\`"[]"\`
       *
       * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
       */
      obj_de_arr: AnyOfValidator<
        | unknown[]
        | {
            [K: string]: unknown;
          }
      >;
      /**
       * Prisma类型：\`Float\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number()\`
       */
      flo: NumberValidator<number>;
      /**
       * Prisma类型：\`Float?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number().nullable()\`
       */
      flo_nu: NumberValidator<number | null>;
      /**
       * Prisma类型：\`Float\`
       *
       * 数据库默认值：\`100.10000000000001\`
       *
       * 运行时规则：\`rule.number()\`
       */
      flo_de: NumberValidator<number>;
      /**
       * Prisma类型：\`Float[]\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.array(rule.number())\`
       */
      flo_arr: ArrayValidator<number[]>;
      /**
       * Prisma类型：\`Float[]\`
       *
       * 数据库默认值：\`[100.10000000000001]\`
       *
       * 运行时规则：\`rule.array(rule.number())\`
       */
      flo_arr_de: ArrayValidator<number[]>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`uuid(4)\`
       *
       * 运行时规则：\`rule.uuid(["v4"])\`
       */
      uu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
       *
       * I am the comments
       */
      comme_ok: StringValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      comme_fail: StringValidator<string>;
      /**
       * Prisma类型：\`Language\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.enum(LanguageEnum)\`
       */
      lang: EnumValidator<
        "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp"
      >;
      /**
       * Prisma类型：\`Language?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.enum(LanguageEnum).nullable()\`
       */
      lang_nu: EnumValidator<
        "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp" | null
      >;
      /**
       * Prisma类型：\`Language\`
       *
       * 数据库默认值：\`"Typescript"\`
       *
       * 运行时规则：\`rule.enum(LanguageEnum)\`
       */
      lang_de: EnumValidator<
        "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp"
      >;
      /**
       * Prisma类型：\`DateTime\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.dateTime()\`
       */
      time: DateTimeValidator<Date>;
      /**
       * Prisma类型：\`DateTime?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.dateTime().nullable()\`
       */
      time_nu: DateTimeValidator<Date | null>;
      /**
       * Prisma类型：\`DateTime\`
       *
       * 数据库默认值：\`now()\`
       *
       * 运行时规则：\`rule.dateTime()\`
       */
      time_de: DateTimeValidator<Date>;
      /**
       * Prisma类型：\`Boolean\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.boolean()\`
       */
      boo: BooleanValidator<boolean>;
      /**
       * Prisma类型：\`Boolean?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.boolean().nullable()\`
       */
      boo_nu: BooleanValidator<boolean | null>;
      /**
       * Prisma类型：\`Boolean\`
       *
       * 数据库默认值：\`true\`
       *
       * 运行时规则：\`rule.boolean()\`
       */
      boo_de: BooleanValidator<boolean>;
      /**
       * Prisma类型：\`BigInt\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.bigint()\`
       */
      big: BigIntValidator<bigint>;
      /**
       * Prisma类型：\`BigInt?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.bigint().nullable()\`
       */
      big_nu: BigIntValidator<bigint | null>;
      /**
       * Prisma类型：\`BigInt\`
       *
       * 数据库默认值：\`"30"\`
       *
       * 运行时规则：\`rule.bigint()\`
       */
      big_de: BigIntValidator<bigint>;
      /**
       * Prisma类型：\`Bytes\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.buffer()\`
       */
      byt: BufferValidator<Buffer>;
      /**
       * Prisma类型：\`Bytes?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.buffer().nullable()\`
       */
      byt_nu: BufferValidator<Buffer | null>;
      /**
       * Prisma类型：\`Bytes\`
       *
       * 数据库默认值：\`""\`
       *
       * 运行时规则：\`rule.buffer()\`
       */
      byt_de: BufferValidator<Buffer>;
      /**
       * Prisma类型：\`MyType\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.object(MyTypeType)\`
       */
      custom: ObjectValidator<{
        id: number;
        name: string;
        other: {
          cde: "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp";
        } & {
          abc?: string | undefined;
        };
      }>;
      /**
       * Prisma类型：\`MyType?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.object(MyTypeType).nullable()\`
       */
      custom_nu: ObjectValidator<{
        id: number;
        name: string;
        other: {
          cde: "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp";
        } & {
          abc?: string | undefined;
        };
      } | null>;
      /**
       * Prisma类型：\`MyType[]\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.array(MyTypeType)\`
       */
      custom_arr: ArrayValidator<
        {
          id: number;
          name: string;
          other: {
            cde: "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp";
          } & {
            abc?: string | undefined;
          };
        }[]
      >;
    };
    /** 选择部分字段 */
    readonly pick: <
      Keys extends
        | "id"
        | "name"
        | "name_nu"
        | "name_de"
        | "str_arr"
        | "str_arr_de"
        | "age"
        | "age_nu"
        | "age_de"
        | "int_arr"
        | "int_arr_de"
        | "obj"
        | "obj_de_obj"
        | "obj_de_arr"
        | "flo"
        | "flo_nu"
        | "flo_de"
        | "flo_arr"
        | "flo_arr_de"
        | "uu"
        | "comme_ok"
        | "comme_fail"
        | "lang"
        | "lang_nu"
        | "lang_de"
        | "time"
        | "time_nu"
        | "time_de"
        | "boo"
        | "boo_nu"
        | "boo_de"
        | "big"
        | "big_nu"
        | "big_de"
        | "byt"
        | "byt_nu"
        | "byt_de",
    >(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof userOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <
      Keys extends
        | "id"
        | "name"
        | "name_nu"
        | "name_de"
        | "str_arr"
        | "str_arr_de"
        | "age"
        | "age_nu"
        | "age_de"
        | "int_arr"
        | "int_arr_de"
        | "obj"
        | "obj_de_obj"
        | "obj_de_arr"
        | "flo"
        | "flo_nu"
        | "flo_de"
        | "flo_arr"
        | "flo_arr_de"
        | "uu"
        | "comme_ok"
        | "comme_fail"
        | "lang"
        | "lang_nu"
        | "lang_de"
        | "time"
        | "time_nu"
        | "time_de"
        | "boo"
        | "boo_nu"
        | "boo_de"
        | "big"
        | "big_nu"
        | "big_de"
        | "byt"
        | "byt_nu"
        | "byt_de",
    >(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof userOutputColumns as K extends Keys
        ? never
        : K]: (typeof userOutputColumns)[K];
    };
  };
  readonly profile: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`auto()\`
       *
       * 运行时规则：\`rule.string()\`
       */
      id: StringValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      user_id: StringValidator<string>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id" | "user_id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof profileOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id" | "user_id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof profileOutputColumns as K extends Keys
        ? never
        : K]: (typeof profileOutputColumns)[K];
    };
  };
  readonly post: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`auto()\`
       *
       * 运行时规则：\`rule.string()\`
       */
      id: StringValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      user_id: StringValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      name: StringValidator<string>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id" | "user_id" | "name">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof postOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id" | "user_id" | "name">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof postOutputColumns as K extends Keys
        ? never
        : K]: (typeof postOutputColumns)[K];
    };
  };
  readonly aliasTableName: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`auto()\`
       *
       * 运行时规则：\`rule.string()\`
       */
      id: StringValidator<string>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof aliasTableNameOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof aliasTableNameOutputColumns as K extends Keys
        ? never
        : K]: (typeof aliasTableNameOutputColumns)[K];
    };
  };
};
export {};
"
`;

exports[`transform mongodb > .js 1`] = `
"import { rule } from "@aomex/common";
function pick(obj, ...keys) {
  const subObj = {};
  for (const key of keys) {
    if (Object.hasOwn(obj, key)) {
      subObj[key] = obj[key];
    }
  }
  return subObj;
}
function omit(obj, ...keys) {
  return pick(obj, ...Object.keys(obj).filter((key) => !keys.includes(key)));
}
const LanguageEnum = [
  "Typescript",
  "Javascript",
  "Rust",
  "Go",
  "Python",
  "Cpp",
];
const YourTypeType = {
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  abc: rule.string().optional(),
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  cde: rule.enum(LanguageEnum),
};
const MyTypeType = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: rule.string(),
  /**
   * Prisma类型：\`YourType\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.object(YourTypeType)\`
   */
  other: rule.object(YourTypeType),
};
const IAmAloseNotUsedType = {
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  id: rule.string(),
};
const IAmNotUsedType = {
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  id: rule.string(),
};
const userInputColumns = {
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`auto()\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  id: rule.string().optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: rule.string(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  name_nu: rule.string().optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`"abc"\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  name_de: rule.string().optional(),
  /**
   * Prisma类型：\`String[]\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.array(rule.string())\`
   */
  str_arr: rule.array(rule.string()),
  /**
   * Prisma类型：\`String[]\`
   *
   * 数据库默认值：\`[]\`
   *
   * 运行时规则：\`rule.array(rule.string()).optional()\`
   */
  str_arr_de: rule.array(rule.string()).optional(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  age: rule.int(),
  /**
   * Prisma类型：\`Int?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  age_nu: rule.int().optional(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  age_de: rule.int().optional(),
  /**
   * Prisma类型：\`Int[]\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.array(rule.int())\`
   */
  int_arr: rule.array(rule.int()),
  /**
   * Prisma类型：\`Int[]\`
   *
   * 数据库默认值：\`[]\`
   *
   * 运行时规则：\`rule.array(rule.int()).optional()\`
   */
  int_arr_de: rule.array(rule.int()).optional(),
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj: rule.anyOf([rule.object(), rule.array()]),
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"{}"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()]).optional()\`
   */
  obj_de_obj: rule.anyOf([rule.object(), rule.array()]).optional(),
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"[]"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()]).optional()\`
   */
  obj_de_arr: rule.anyOf([rule.object(), rule.array()]).optional(),
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  flo: rule.number(),
  /**
   * Prisma类型：\`Float?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  flo_nu: rule.number().optional(),
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：\`100.10000000000001\`
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  flo_de: rule.number().optional(),
  /**
   * Prisma类型：\`Float[]\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.array(rule.number())\`
   */
  flo_arr: rule.array(rule.number()),
  /**
   * Prisma类型：\`Float[]\`
   *
   * 数据库默认值：\`[100.10000000000001]\`
   *
   * 运行时规则：\`rule.array(rule.number()).optional()\`
   */
  flo_arr_de: rule.array(rule.number()).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`uuid(4)\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu: rule.uuid(["v4"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
   *
   * I am the comments
   */
  comme_ok: rule.string().docs({ description: "I am the comments" }),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  comme_fail: rule.string(),
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  lang: rule.enum(LanguageEnum),
  /**
   * Prisma类型：\`Language?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum).optional()\`
   */
  lang_nu: rule.enum(LanguageEnum).optional(),
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：\`"Typescript"\`
   *
   * 运行时规则：\`rule.enum(LanguageEnum).optional()\`
   */
  lang_de: rule.enum(LanguageEnum).optional(),
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time: rule.dateTime(),
  /**
   * Prisma类型：\`DateTime?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime().optional()\`
   */
  time_nu: rule.dateTime().optional(),
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：\`now()\`
   *
   * 运行时规则：\`rule.dateTime().optional()\`
   */
  time_de: rule.dateTime().optional(),
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo: rule.boolean(),
  /**
   * Prisma类型：\`Boolean?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean().optional()\`
   */
  boo_nu: rule.boolean().optional(),
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：\`true\`
   *
   * 运行时规则：\`rule.boolean().optional()\`
   */
  boo_de: rule.boolean().optional(),
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big: rule.bigint(),
  /**
   * Prisma类型：\`BigInt?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint().optional()\`
   */
  big_nu: rule.bigint().optional(),
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：\`"30"\`
   *
   * 运行时规则：\`rule.bigint().optional()\`
   */
  big_de: rule.bigint().optional(),
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt: rule.buffer(),
  /**
   * Prisma类型：\`Bytes?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer().optional()\`
   */
  byt_nu: rule.buffer().optional(),
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：\`""\`
   *
   * 运行时规则：\`rule.buffer().optional()\`
   */
  byt_de: rule.buffer().optional(),
  /**
   * Prisma类型：\`MyType\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.object(MyTypeType)\`
   */
  custom: rule.object(MyTypeType),
  /**
   * Prisma类型：\`MyType?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.object(MyTypeType).optional()\`
   */
  custom_nu: rule.object(MyTypeType).optional(),
  /**
   * Prisma类型：\`MyType[]\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.array(MyTypeType)\`
   */
  custom_arr: rule.array(MyTypeType),
};
const userOutputColumns = {
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`auto()\`
   *
   * 运行时规则：\`rule.string()\`
   */
  id: rule.string(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: rule.string(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().nullable()\`
   */
  name_nu: rule.string().nullable(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`"abc"\`
   *
   * 运行时规则：\`rule.string()\`
   */
  name_de: rule.string(),
  /**
   * Prisma类型：\`String[]\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.array(rule.string())\`
   */
  str_arr: rule.array(rule.string()),
  /**
   * Prisma类型：\`String[]\`
   *
   * 数据库默认值：\`[]\`
   *
   * 运行时规则：\`rule.array(rule.string())\`
   */
  str_arr_de: rule.array(rule.string()),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  age: rule.int(),
  /**
   * Prisma类型：\`Int?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int().nullable()\`
   */
  age_nu: rule.int().nullable(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.int()\`
   */
  age_de: rule.int(),
  /**
   * Prisma类型：\`Int[]\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.array(rule.int())\`
   */
  int_arr: rule.array(rule.int()),
  /**
   * Prisma类型：\`Int[]\`
   *
   * 数据库默认值：\`[]\`
   *
   * 运行时规则：\`rule.array(rule.int())\`
   */
  int_arr_de: rule.array(rule.int()),
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj: rule.anyOf([rule.object(), rule.array()]),
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"{}"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj_de_obj: rule.anyOf([rule.object(), rule.array()]),
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"[]"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj_de_arr: rule.anyOf([rule.object(), rule.array()]),
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  flo: rule.number(),
  /**
   * Prisma类型：\`Float?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().nullable()\`
   */
  flo_nu: rule.number().nullable(),
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：\`100.10000000000001\`
   *
   * 运行时规则：\`rule.number()\`
   */
  flo_de: rule.number(),
  /**
   * Prisma类型：\`Float[]\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.array(rule.number())\`
   */
  flo_arr: rule.array(rule.number()),
  /**
   * Prisma类型：\`Float[]\`
   *
   * 数据库默认值：\`[100.10000000000001]\`
   *
   * 运行时规则：\`rule.array(rule.number())\`
   */
  flo_arr_de: rule.array(rule.number()),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`uuid(4)\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu: rule.uuid(["v4"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
   *
   * I am the comments
   */
  comme_ok: rule.string().docs({ description: "I am the comments" }),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  comme_fail: rule.string(),
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  lang: rule.enum(LanguageEnum),
  /**
   * Prisma类型：\`Language?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum).nullable()\`
   */
  lang_nu: rule.enum(LanguageEnum).nullable(),
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：\`"Typescript"\`
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  lang_de: rule.enum(LanguageEnum),
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time: rule.dateTime(),
  /**
   * Prisma类型：\`DateTime?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime().nullable()\`
   */
  time_nu: rule.dateTime().nullable(),
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：\`now()\`
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time_de: rule.dateTime(),
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo: rule.boolean(),
  /**
   * Prisma类型：\`Boolean?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean().nullable()\`
   */
  boo_nu: rule.boolean().nullable(),
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：\`true\`
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo_de: rule.boolean(),
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big: rule.bigint(),
  /**
   * Prisma类型：\`BigInt?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint().nullable()\`
   */
  big_nu: rule.bigint().nullable(),
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：\`"30"\`
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big_de: rule.bigint(),
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt: rule.buffer(),
  /**
   * Prisma类型：\`Bytes?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer().nullable()\`
   */
  byt_nu: rule.buffer().nullable(),
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：\`""\`
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt_de: rule.buffer(),
  /**
   * Prisma类型：\`MyType\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.object(MyTypeType)\`
   */
  custom: rule.object(MyTypeType),
  /**
   * Prisma类型：\`MyType?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.object(MyTypeType).nullable()\`
   */
  custom_nu: rule.object(MyTypeType).nullable(),
  /**
   * Prisma类型：\`MyType[]\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.array(MyTypeType)\`
   */
  custom_arr: rule.array(MyTypeType),
};
const profileInputColumns = {
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`auto()\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  id: rule.string().optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  user_id: rule.string(),
};
const profileOutputColumns = {
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`auto()\`
   *
   * 运行时规则：\`rule.string()\`
   */
  id: rule.string(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  user_id: rule.string(),
};
const postInputColumns = {
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`auto()\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  id: rule.string().optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  user_id: rule.string(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: rule.string(),
};
const postOutputColumns = {
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`auto()\`
   *
   * 运行时规则：\`rule.string()\`
   */
  id: rule.string(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  user_id: rule.string(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: rule.string(),
};
const aliasTableNameInputColumns = {
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`auto()\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  id: rule.string().optional(),
};
const aliasTableNameOutputColumns = {
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`auto()\`
   *
   * 运行时规则：\`rule.string()\`
   */
  id: rule.string(),
};

export const prismaInput = {
  user: {
    /** 所有字段对象 */
    columns: userInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(userInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(userInputColumns, ...keys);
    },
  },
  profile: {
    /** 所有字段对象 */
    columns: profileInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(profileInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(profileInputColumns, ...keys);
    },
  },
  post: {
    /** 所有字段对象 */
    columns: postInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(postInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(postInputColumns, ...keys);
    },
  },
  aliasTableName: {
    /** 所有字段对象 */
    columns: aliasTableNameInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(aliasTableNameInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(aliasTableNameInputColumns, ...keys);
    },
  },
};

export const prismaOutput = {
  user: {
    /** 所有字段对象 */
    columns: userOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(userOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(userOutputColumns, ...keys);
    },
  },
  profile: {
    /** 所有字段对象 */
    columns: profileOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(profileOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(profileOutputColumns, ...keys);
    },
  },
  post: {
    /** 所有字段对象 */
    columns: postOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(postOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(postOutputColumns, ...keys);
    },
  },
  aliasTableName: {
    /** 所有字段对象 */
    columns: aliasTableNameOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(aliasTableNameOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(aliasTableNameOutputColumns, ...keys);
    },
  },
};
"
`;

exports[`transform mysql > .d.ts 1`] = `
"import {
  AnyOfValidator,
  BigIntValidator,
  BooleanValidator,
  BufferValidator,
  DateTimeValidator,
  EnumValidator,
  IntValidator,
  NumberValidator,
  StringValidator,
  UuidValidator,
  Validator,
} from "@aomex/common";
declare const userInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: StringValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  name_nu: StringValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`"abc"\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  name_de: StringValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  age: IntValidator<number>;
  /**
   * Prisma类型：\`Int?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  age_nu: IntValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  age_de: IntValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj: AnyOfValidator<
    | unknown[]
    | {
        [K: string]: unknown;
      }
  >;
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"{}"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()]).optional()\`
   */
  obj_de_obj: AnyOfValidator<
    | unknown[]
    | Validator.TOptional
    | {
        [K: string]: unknown;
      }
  >;
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"[]"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()]).optional()\`
   */
  obj_de_arr: AnyOfValidator<
    | unknown[]
    | Validator.TOptional
    | {
        [K: string]: unknown;
      }
  >;
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  deci: NumberValidator<number>;
  /**
   * Prisma类型：\`Decimal?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  deci_nu: NumberValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  deci_de: NumberValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  flo: NumberValidator<number>;
  /**
   * Prisma类型：\`Float?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  flo_nu: NumberValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：\`100.10000000000001\`
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  flo_de: NumberValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`uuid(4)\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"]).optional()\`
   */
  uu_1: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"]).optional()\`
   */
  uu_1_nu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"]).optional()\`
   */
  uu_2: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"]).optional()\`
   */
  uu_2_nu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"]).optional()\`
   */
  uu_3: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"]).optional()\`
   */
  uu_3_nu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu_4: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu_4_nu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"]).optional()\`
   */
  uu_5: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"]).optional()\`
   */
  uu_5_nu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  uu_6: StringValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  uu_6_nu: StringValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
   *
   * I am the comments
   */
  comme_ok: StringValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  comme_fail: StringValidator<string>;
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  lang: EnumValidator<
    "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp"
  >;
  /**
   * Prisma类型：\`Language?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum).optional()\`
   */
  lang_nu: EnumValidator<
    | Validator.TOptional
    | "Typescript"
    | "Javascript"
    | "Rust"
    | "Go"
    | "Python"
    | "Cpp"
  >;
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：\`"Typescript"\`
   *
   * 运行时规则：\`rule.enum(LanguageEnum).optional()\`
   */
  lang_de: EnumValidator<
    | Validator.TOptional
    | "Typescript"
    | "Javascript"
    | "Rust"
    | "Go"
    | "Python"
    | "Cpp"
  >;
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time: DateTimeValidator<Date>;
  /**
   * Prisma类型：\`DateTime?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime().optional()\`
   */
  time_nu: DateTimeValidator<Validator.TOptional | Date>;
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：\`now()\`
   *
   * 运行时规则：\`rule.dateTime().optional()\`
   */
  time_de: DateTimeValidator<Validator.TOptional | Date>;
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo: BooleanValidator<boolean>;
  /**
   * Prisma类型：\`Boolean?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean().optional()\`
   */
  boo_nu: BooleanValidator<boolean | Validator.TOptional>;
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：\`true\`
   *
   * 运行时规则：\`rule.boolean().optional()\`
   */
  boo_de: BooleanValidator<boolean | Validator.TOptional>;
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big: BigIntValidator<bigint>;
  /**
   * Prisma类型：\`BigInt?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint().optional()\`
   */
  big_nu: BigIntValidator<bigint | Validator.TOptional>;
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：\`"30"\`
   *
   * 运行时规则：\`rule.bigint().optional()\`
   */
  big_de: BigIntValidator<bigint | Validator.TOptional>;
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt: BufferValidator<Buffer>;
  /**
   * Prisma类型：\`Bytes?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer().optional()\`
   */
  byt_nu: BufferValidator<Validator.TOptional | Buffer>;
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：\`""\`
   *
   * 运行时规则：\`rule.buffer().optional()\`
   */
  byt_de: BufferValidator<Validator.TOptional | Buffer>;
};
declare const userOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: StringValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().nullable()\`
   */
  name_nu: StringValidator<string | null>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`"abc"\`
   *
   * 运行时规则：\`rule.string()\`
   */
  name_de: StringValidator<string>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  age: IntValidator<number>;
  /**
   * Prisma类型：\`Int?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int().nullable()\`
   */
  age_nu: IntValidator<number | null>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.int()\`
   */
  age_de: IntValidator<number>;
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj: AnyOfValidator<
    | unknown[]
    | {
        [K: string]: unknown;
      }
  >;
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"{}"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj_de_obj: AnyOfValidator<
    | unknown[]
    | {
        [K: string]: unknown;
      }
  >;
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"[]"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj_de_arr: AnyOfValidator<
    | unknown[]
    | {
        [K: string]: unknown;
      }
  >;
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  deci: NumberValidator<number>;
  /**
   * Prisma类型：\`Decimal?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().nullable()\`
   */
  deci_nu: NumberValidator<number | null>;
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.number()\`
   */
  deci_de: NumberValidator<number>;
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  flo: NumberValidator<number>;
  /**
   * Prisma类型：\`Float?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().nullable()\`
   */
  flo_nu: NumberValidator<number | null>;
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：\`100.10000000000001\`
   *
   * 运行时规则：\`rule.number()\`
   */
  flo_de: NumberValidator<number>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`uuid(4)\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"])\`
   */
  uu_1: UuidValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"])\`
   */
  uu_1_nu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"])\`
   */
  uu_2: UuidValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"])\`
   */
  uu_2_nu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"])\`
   */
  uu_3: UuidValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"])\`
   */
  uu_3_nu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu_4: UuidValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu_4_nu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"])\`
   */
  uu_5: UuidValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"])\`
   */
  uu_5_nu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string()\`
   */
  uu_6: StringValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string()\`
   */
  uu_6_nu: StringValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
   *
   * I am the comments
   */
  comme_ok: StringValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  comme_fail: StringValidator<string>;
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  lang: EnumValidator<
    "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp"
  >;
  /**
   * Prisma类型：\`Language?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum).nullable()\`
   */
  lang_nu: EnumValidator<
    "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp" | null
  >;
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：\`"Typescript"\`
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  lang_de: EnumValidator<
    "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp"
  >;
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time: DateTimeValidator<Date>;
  /**
   * Prisma类型：\`DateTime?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime().nullable()\`
   */
  time_nu: DateTimeValidator<Date | null>;
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：\`now()\`
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time_de: DateTimeValidator<Date>;
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo: BooleanValidator<boolean>;
  /**
   * Prisma类型：\`Boolean?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean().nullable()\`
   */
  boo_nu: BooleanValidator<boolean | null>;
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：\`true\`
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo_de: BooleanValidator<boolean>;
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big: BigIntValidator<bigint>;
  /**
   * Prisma类型：\`BigInt?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint().nullable()\`
   */
  big_nu: BigIntValidator<bigint | null>;
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：\`"30"\`
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big_de: BigIntValidator<bigint>;
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt: BufferValidator<Buffer>;
  /**
   * Prisma类型：\`Bytes?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer().nullable()\`
   */
  byt_nu: BufferValidator<Buffer | null>;
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：\`""\`
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt_de: BufferValidator<Buffer>;
};
declare const profileInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: IntValidator<number>;
};
declare const profileOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: IntValidator<number>;
};
declare const postInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: IntValidator<number>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: StringValidator<string>;
};
declare const postOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: IntValidator<number>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: StringValidator<string>;
};
declare const aliasTableNameInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
};
declare const aliasTableNameOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
};

export declare const prismaInput: {
  readonly user: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      name: StringValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string().optional()\`
       */
      name_nu: StringValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`"abc"\`
       *
       * 运行时规则：\`rule.string().optional()\`
       */
      name_de: StringValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      age: IntValidator<number>;
      /**
       * Prisma类型：\`Int?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      age_nu: IntValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`100\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      age_de: IntValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Json\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
       */
      obj: AnyOfValidator<
        | unknown[]
        | {
            [K: string]: unknown;
          }
      >;
      /**
       * Prisma类型：\`Json\`
       *
       * 数据库默认值：\`"{}"\`
       *
       * 运行时规则：\`rule.anyOf([rule.object(), rule.array()]).optional()\`
       */
      obj_de_obj: AnyOfValidator<
        | unknown[]
        | Validator.TOptional
        | {
            [K: string]: unknown;
          }
      >;
      /**
       * Prisma类型：\`Json\`
       *
       * 数据库默认值：\`"[]"\`
       *
       * 运行时规则：\`rule.anyOf([rule.object(), rule.array()]).optional()\`
       */
      obj_de_arr: AnyOfValidator<
        | unknown[]
        | Validator.TOptional
        | {
            [K: string]: unknown;
          }
      >;
      /**
       * Prisma类型：\`Decimal\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number()\`
       */
      deci: NumberValidator<number>;
      /**
       * Prisma类型：\`Decimal?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number().optional()\`
       */
      deci_nu: NumberValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Decimal\`
       *
       * 数据库默认值：\`100\`
       *
       * 运行时规则：\`rule.number().optional()\`
       */
      deci_de: NumberValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Float\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number()\`
       */
      flo: NumberValidator<number>;
      /**
       * Prisma类型：\`Float?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number().optional()\`
       */
      flo_nu: NumberValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Float\`
       *
       * 数据库默认值：\`100.10000000000001\`
       *
       * 运行时规则：\`rule.number().optional()\`
       */
      flo_de: NumberValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`uuid(4)\`
       *
       * 运行时规则：\`rule.uuid(["v4"]).optional()\`
       */
      uu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
       *
       * 运行时规则：\`rule.uuid(["v1"]).optional()\`
       */
      uu_1: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
       *
       * 运行时规则：\`rule.uuid(["v1"]).optional()\`
       */
      uu_1_nu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
       *
       * 运行时规则：\`rule.uuid(["v2"]).optional()\`
       */
      uu_2: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
       *
       * 运行时规则：\`rule.uuid(["v2"]).optional()\`
       */
      uu_2_nu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
       *
       * 运行时规则：\`rule.uuid(["v3"]).optional()\`
       */
      uu_3: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
       *
       * 运行时规则：\`rule.uuid(["v3"]).optional()\`
       */
      uu_3_nu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
       *
       * 运行时规则：\`rule.uuid(["v4"]).optional()\`
       */
      uu_4: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
       *
       * 运行时规则：\`rule.uuid(["v4"]).optional()\`
       */
      uu_4_nu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
       *
       * 运行时规则：\`rule.uuid(["v5"]).optional()\`
       */
      uu_5: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
       *
       * 运行时规则：\`rule.uuid(["v5"]).optional()\`
       */
      uu_5_nu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
       *
       * 运行时规则：\`rule.string().optional()\`
       */
      uu_6: StringValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
       *
       * 运行时规则：\`rule.string().optional()\`
       */
      uu_6_nu: StringValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
       *
       * I am the comments
       */
      comme_ok: StringValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      comme_fail: StringValidator<string>;
      /**
       * Prisma类型：\`Language\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.enum(LanguageEnum)\`
       */
      lang: EnumValidator<
        "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp"
      >;
      /**
       * Prisma类型：\`Language?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.enum(LanguageEnum).optional()\`
       */
      lang_nu: EnumValidator<
        | Validator.TOptional
        | "Typescript"
        | "Javascript"
        | "Rust"
        | "Go"
        | "Python"
        | "Cpp"
      >;
      /**
       * Prisma类型：\`Language\`
       *
       * 数据库默认值：\`"Typescript"\`
       *
       * 运行时规则：\`rule.enum(LanguageEnum).optional()\`
       */
      lang_de: EnumValidator<
        | Validator.TOptional
        | "Typescript"
        | "Javascript"
        | "Rust"
        | "Go"
        | "Python"
        | "Cpp"
      >;
      /**
       * Prisma类型：\`DateTime\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.dateTime()\`
       */
      time: DateTimeValidator<Date>;
      /**
       * Prisma类型：\`DateTime?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.dateTime().optional()\`
       */
      time_nu: DateTimeValidator<Validator.TOptional | Date>;
      /**
       * Prisma类型：\`DateTime\`
       *
       * 数据库默认值：\`now()\`
       *
       * 运行时规则：\`rule.dateTime().optional()\`
       */
      time_de: DateTimeValidator<Validator.TOptional | Date>;
      /**
       * Prisma类型：\`Boolean\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.boolean()\`
       */
      boo: BooleanValidator<boolean>;
      /**
       * Prisma类型：\`Boolean?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.boolean().optional()\`
       */
      boo_nu: BooleanValidator<boolean | Validator.TOptional>;
      /**
       * Prisma类型：\`Boolean\`
       *
       * 数据库默认值：\`true\`
       *
       * 运行时规则：\`rule.boolean().optional()\`
       */
      boo_de: BooleanValidator<boolean | Validator.TOptional>;
      /**
       * Prisma类型：\`BigInt\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.bigint()\`
       */
      big: BigIntValidator<bigint>;
      /**
       * Prisma类型：\`BigInt?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.bigint().optional()\`
       */
      big_nu: BigIntValidator<bigint | Validator.TOptional>;
      /**
       * Prisma类型：\`BigInt\`
       *
       * 数据库默认值：\`"30"\`
       *
       * 运行时规则：\`rule.bigint().optional()\`
       */
      big_de: BigIntValidator<bigint | Validator.TOptional>;
      /**
       * Prisma类型：\`Bytes\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.buffer()\`
       */
      byt: BufferValidator<Buffer>;
      /**
       * Prisma类型：\`Bytes?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.buffer().optional()\`
       */
      byt_nu: BufferValidator<Validator.TOptional | Buffer>;
      /**
       * Prisma类型：\`Bytes\`
       *
       * 数据库默认值：\`""\`
       *
       * 运行时规则：\`rule.buffer().optional()\`
       */
      byt_de: BufferValidator<Validator.TOptional | Buffer>;
    };
    /** 选择部分字段 */
    readonly pick: <
      Keys extends
        | "id"
        | "name"
        | "name_nu"
        | "name_de"
        | "age"
        | "age_nu"
        | "age_de"
        | "obj"
        | "obj_de_obj"
        | "obj_de_arr"
        | "deci"
        | "deci_nu"
        | "deci_de"
        | "flo"
        | "flo_nu"
        | "flo_de"
        | "uu"
        | "uu_1"
        | "uu_1_nu"
        | "uu_2"
        | "uu_2_nu"
        | "uu_3"
        | "uu_3_nu"
        | "uu_4"
        | "uu_4_nu"
        | "uu_5"
        | "uu_5_nu"
        | "uu_6"
        | "uu_6_nu"
        | "comme_ok"
        | "comme_fail"
        | "lang"
        | "lang_nu"
        | "lang_de"
        | "time"
        | "time_nu"
        | "time_de"
        | "boo"
        | "boo_nu"
        | "boo_de"
        | "big"
        | "big_nu"
        | "big_de"
        | "byt"
        | "byt_nu"
        | "byt_de",
    >(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof userInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <
      Keys extends
        | "id"
        | "name"
        | "name_nu"
        | "name_de"
        | "age"
        | "age_nu"
        | "age_de"
        | "obj"
        | "obj_de_obj"
        | "obj_de_arr"
        | "deci"
        | "deci_nu"
        | "deci_de"
        | "flo"
        | "flo_nu"
        | "flo_de"
        | "uu"
        | "uu_1"
        | "uu_1_nu"
        | "uu_2"
        | "uu_2_nu"
        | "uu_3"
        | "uu_3_nu"
        | "uu_4"
        | "uu_4_nu"
        | "uu_5"
        | "uu_5_nu"
        | "uu_6"
        | "uu_6_nu"
        | "comme_ok"
        | "comme_fail"
        | "lang"
        | "lang_nu"
        | "lang_de"
        | "time"
        | "time_nu"
        | "time_de"
        | "boo"
        | "boo_nu"
        | "boo_de"
        | "big"
        | "big_nu"
        | "big_de"
        | "byt"
        | "byt_nu"
        | "byt_de",
    >(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof userInputColumns as K extends Keys
        ? never
        : K]: (typeof userInputColumns)[K];
    };
  };
  readonly profile: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      user_id: IntValidator<number>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id" | "user_id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof profileInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id" | "user_id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof profileInputColumns as K extends Keys
        ? never
        : K]: (typeof profileInputColumns)[K];
    };
  };
  readonly post: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      user_id: IntValidator<number>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      name: StringValidator<string>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id" | "user_id" | "name">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof postInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id" | "user_id" | "name">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof postInputColumns as K extends Keys
        ? never
        : K]: (typeof postInputColumns)[K];
    };
  };
  readonly aliasTableName: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof aliasTableNameInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof aliasTableNameInputColumns as K extends Keys
        ? never
        : K]: (typeof aliasTableNameInputColumns)[K];
    };
  };
};

export declare const prismaOutput: {
  readonly user: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      name: StringValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string().nullable()\`
       */
      name_nu: StringValidator<string | null>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`"abc"\`
       *
       * 运行时规则：\`rule.string()\`
       */
      name_de: StringValidator<string>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      age: IntValidator<number>;
      /**
       * Prisma类型：\`Int?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int().nullable()\`
       */
      age_nu: IntValidator<number | null>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`100\`
       *
       * 运行时规则：\`rule.int()\`
       */
      age_de: IntValidator<number>;
      /**
       * Prisma类型：\`Json\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
       */
      obj: AnyOfValidator<
        | unknown[]
        | {
            [K: string]: unknown;
          }
      >;
      /**
       * Prisma类型：\`Json\`
       *
       * 数据库默认值：\`"{}"\`
       *
       * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
       */
      obj_de_obj: AnyOfValidator<
        | unknown[]
        | {
            [K: string]: unknown;
          }
      >;
      /**
       * Prisma类型：\`Json\`
       *
       * 数据库默认值：\`"[]"\`
       *
       * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
       */
      obj_de_arr: AnyOfValidator<
        | unknown[]
        | {
            [K: string]: unknown;
          }
      >;
      /**
       * Prisma类型：\`Decimal\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number()\`
       */
      deci: NumberValidator<number>;
      /**
       * Prisma类型：\`Decimal?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number().nullable()\`
       */
      deci_nu: NumberValidator<number | null>;
      /**
       * Prisma类型：\`Decimal\`
       *
       * 数据库默认值：\`100\`
       *
       * 运行时规则：\`rule.number()\`
       */
      deci_de: NumberValidator<number>;
      /**
       * Prisma类型：\`Float\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number()\`
       */
      flo: NumberValidator<number>;
      /**
       * Prisma类型：\`Float?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number().nullable()\`
       */
      flo_nu: NumberValidator<number | null>;
      /**
       * Prisma类型：\`Float\`
       *
       * 数据库默认值：\`100.10000000000001\`
       *
       * 运行时规则：\`rule.number()\`
       */
      flo_de: NumberValidator<number>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`uuid(4)\`
       *
       * 运行时规则：\`rule.uuid(["v4"])\`
       */
      uu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
       *
       * 运行时规则：\`rule.uuid(["v1"])\`
       */
      uu_1: UuidValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
       *
       * 运行时规则：\`rule.uuid(["v1"])\`
       */
      uu_1_nu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
       *
       * 运行时规则：\`rule.uuid(["v2"])\`
       */
      uu_2: UuidValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
       *
       * 运行时规则：\`rule.uuid(["v2"])\`
       */
      uu_2_nu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
       *
       * 运行时规则：\`rule.uuid(["v3"])\`
       */
      uu_3: UuidValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
       *
       * 运行时规则：\`rule.uuid(["v3"])\`
       */
      uu_3_nu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
       *
       * 运行时规则：\`rule.uuid(["v4"])\`
       */
      uu_4: UuidValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
       *
       * 运行时规则：\`rule.uuid(["v4"])\`
       */
      uu_4_nu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
       *
       * 运行时规则：\`rule.uuid(["v5"])\`
       */
      uu_5: UuidValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
       *
       * 运行时规则：\`rule.uuid(["v5"])\`
       */
      uu_5_nu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
       *
       * 运行时规则：\`rule.string()\`
       */
      uu_6: StringValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
       *
       * 运行时规则：\`rule.string()\`
       */
      uu_6_nu: StringValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
       *
       * I am the comments
       */
      comme_ok: StringValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      comme_fail: StringValidator<string>;
      /**
       * Prisma类型：\`Language\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.enum(LanguageEnum)\`
       */
      lang: EnumValidator<
        "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp"
      >;
      /**
       * Prisma类型：\`Language?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.enum(LanguageEnum).nullable()\`
       */
      lang_nu: EnumValidator<
        "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp" | null
      >;
      /**
       * Prisma类型：\`Language\`
       *
       * 数据库默认值：\`"Typescript"\`
       *
       * 运行时规则：\`rule.enum(LanguageEnum)\`
       */
      lang_de: EnumValidator<
        "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp"
      >;
      /**
       * Prisma类型：\`DateTime\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.dateTime()\`
       */
      time: DateTimeValidator<Date>;
      /**
       * Prisma类型：\`DateTime?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.dateTime().nullable()\`
       */
      time_nu: DateTimeValidator<Date | null>;
      /**
       * Prisma类型：\`DateTime\`
       *
       * 数据库默认值：\`now()\`
       *
       * 运行时规则：\`rule.dateTime()\`
       */
      time_de: DateTimeValidator<Date>;
      /**
       * Prisma类型：\`Boolean\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.boolean()\`
       */
      boo: BooleanValidator<boolean>;
      /**
       * Prisma类型：\`Boolean?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.boolean().nullable()\`
       */
      boo_nu: BooleanValidator<boolean | null>;
      /**
       * Prisma类型：\`Boolean\`
       *
       * 数据库默认值：\`true\`
       *
       * 运行时规则：\`rule.boolean()\`
       */
      boo_de: BooleanValidator<boolean>;
      /**
       * Prisma类型：\`BigInt\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.bigint()\`
       */
      big: BigIntValidator<bigint>;
      /**
       * Prisma类型：\`BigInt?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.bigint().nullable()\`
       */
      big_nu: BigIntValidator<bigint | null>;
      /**
       * Prisma类型：\`BigInt\`
       *
       * 数据库默认值：\`"30"\`
       *
       * 运行时规则：\`rule.bigint()\`
       */
      big_de: BigIntValidator<bigint>;
      /**
       * Prisma类型：\`Bytes\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.buffer()\`
       */
      byt: BufferValidator<Buffer>;
      /**
       * Prisma类型：\`Bytes?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.buffer().nullable()\`
       */
      byt_nu: BufferValidator<Buffer | null>;
      /**
       * Prisma类型：\`Bytes\`
       *
       * 数据库默认值：\`""\`
       *
       * 运行时规则：\`rule.buffer()\`
       */
      byt_de: BufferValidator<Buffer>;
    };
    /** 选择部分字段 */
    readonly pick: <
      Keys extends
        | "id"
        | "name"
        | "name_nu"
        | "name_de"
        | "age"
        | "age_nu"
        | "age_de"
        | "obj"
        | "obj_de_obj"
        | "obj_de_arr"
        | "deci"
        | "deci_nu"
        | "deci_de"
        | "flo"
        | "flo_nu"
        | "flo_de"
        | "uu"
        | "uu_1"
        | "uu_1_nu"
        | "uu_2"
        | "uu_2_nu"
        | "uu_3"
        | "uu_3_nu"
        | "uu_4"
        | "uu_4_nu"
        | "uu_5"
        | "uu_5_nu"
        | "uu_6"
        | "uu_6_nu"
        | "comme_ok"
        | "comme_fail"
        | "lang"
        | "lang_nu"
        | "lang_de"
        | "time"
        | "time_nu"
        | "time_de"
        | "boo"
        | "boo_nu"
        | "boo_de"
        | "big"
        | "big_nu"
        | "big_de"
        | "byt"
        | "byt_nu"
        | "byt_de",
    >(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof userOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <
      Keys extends
        | "id"
        | "name"
        | "name_nu"
        | "name_de"
        | "age"
        | "age_nu"
        | "age_de"
        | "obj"
        | "obj_de_obj"
        | "obj_de_arr"
        | "deci"
        | "deci_nu"
        | "deci_de"
        | "flo"
        | "flo_nu"
        | "flo_de"
        | "uu"
        | "uu_1"
        | "uu_1_nu"
        | "uu_2"
        | "uu_2_nu"
        | "uu_3"
        | "uu_3_nu"
        | "uu_4"
        | "uu_4_nu"
        | "uu_5"
        | "uu_5_nu"
        | "uu_6"
        | "uu_6_nu"
        | "comme_ok"
        | "comme_fail"
        | "lang"
        | "lang_nu"
        | "lang_de"
        | "time"
        | "time_nu"
        | "time_de"
        | "boo"
        | "boo_nu"
        | "boo_de"
        | "big"
        | "big_nu"
        | "big_de"
        | "byt"
        | "byt_nu"
        | "byt_de",
    >(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof userOutputColumns as K extends Keys
        ? never
        : K]: (typeof userOutputColumns)[K];
    };
  };
  readonly profile: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      user_id: IntValidator<number>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id" | "user_id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof profileOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id" | "user_id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof profileOutputColumns as K extends Keys
        ? never
        : K]: (typeof profileOutputColumns)[K];
    };
  };
  readonly post: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      user_id: IntValidator<number>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      name: StringValidator<string>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id" | "user_id" | "name">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof postOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id" | "user_id" | "name">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof postOutputColumns as K extends Keys
        ? never
        : K]: (typeof postOutputColumns)[K];
    };
  };
  readonly aliasTableName: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof aliasTableNameOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof aliasTableNameOutputColumns as K extends Keys
        ? never
        : K]: (typeof aliasTableNameOutputColumns)[K];
    };
  };
};
export {};
"
`;

exports[`transform mysql > .js 1`] = `
"import { rule } from "@aomex/common";
function pick(obj, ...keys) {
  const subObj = {};
  for (const key of keys) {
    if (Object.hasOwn(obj, key)) {
      subObj[key] = obj[key];
    }
  }
  return subObj;
}
function omit(obj, ...keys) {
  return pick(obj, ...Object.keys(obj).filter((key) => !keys.includes(key)));
}
const LanguageEnum = [
  "Typescript",
  "Javascript",
  "Rust",
  "Go",
  "Python",
  "Cpp",
];
const userInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: rule.string(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  name_nu: rule.string().optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`"abc"\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  name_de: rule.string().optional(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  age: rule.int(),
  /**
   * Prisma类型：\`Int?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  age_nu: rule.int().optional(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  age_de: rule.int().optional(),
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj: rule.anyOf([rule.object(), rule.array()]),
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"{}"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()]).optional()\`
   */
  obj_de_obj: rule.anyOf([rule.object(), rule.array()]).optional(),
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"[]"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()]).optional()\`
   */
  obj_de_arr: rule.anyOf([rule.object(), rule.array()]).optional(),
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  deci: rule.number(),
  /**
   * Prisma类型：\`Decimal?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  deci_nu: rule.number().optional(),
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  deci_de: rule.number().optional(),
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  flo: rule.number(),
  /**
   * Prisma类型：\`Float?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  flo_nu: rule.number().optional(),
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：\`100.10000000000001\`
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  flo_de: rule.number().optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`uuid(4)\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu: rule.uuid(["v4"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"]).optional()\`
   */
  uu_1: rule.uuid(["v1"]).optional(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"]).optional()\`
   */
  uu_1_nu: rule.uuid(["v1"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"]).optional()\`
   */
  uu_2: rule.uuid(["v2"]).optional(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"]).optional()\`
   */
  uu_2_nu: rule.uuid(["v2"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"]).optional()\`
   */
  uu_3: rule.uuid(["v3"]).optional(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"]).optional()\`
   */
  uu_3_nu: rule.uuid(["v3"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu_4: rule.uuid(["v4"]).optional(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu_4_nu: rule.uuid(["v4"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"]).optional()\`
   */
  uu_5: rule.uuid(["v5"]).optional(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"]).optional()\`
   */
  uu_5_nu: rule.uuid(["v5"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  uu_6: rule.string().optional(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  uu_6_nu: rule.string().optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
   *
   * I am the comments
   */
  comme_ok: rule.string().docs({ description: "I am the comments" }),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  comme_fail: rule.string(),
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  lang: rule.enum(LanguageEnum),
  /**
   * Prisma类型：\`Language?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum).optional()\`
   */
  lang_nu: rule.enum(LanguageEnum).optional(),
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：\`"Typescript"\`
   *
   * 运行时规则：\`rule.enum(LanguageEnum).optional()\`
   */
  lang_de: rule.enum(LanguageEnum).optional(),
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time: rule.dateTime(),
  /**
   * Prisma类型：\`DateTime?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime().optional()\`
   */
  time_nu: rule.dateTime().optional(),
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：\`now()\`
   *
   * 运行时规则：\`rule.dateTime().optional()\`
   */
  time_de: rule.dateTime().optional(),
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo: rule.boolean(),
  /**
   * Prisma类型：\`Boolean?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean().optional()\`
   */
  boo_nu: rule.boolean().optional(),
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：\`true\`
   *
   * 运行时规则：\`rule.boolean().optional()\`
   */
  boo_de: rule.boolean().optional(),
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big: rule.bigint(),
  /**
   * Prisma类型：\`BigInt?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint().optional()\`
   */
  big_nu: rule.bigint().optional(),
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：\`"30"\`
   *
   * 运行时规则：\`rule.bigint().optional()\`
   */
  big_de: rule.bigint().optional(),
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt: rule.buffer(),
  /**
   * Prisma类型：\`Bytes?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer().optional()\`
   */
  byt_nu: rule.buffer().optional(),
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：\`""\`
   *
   * 运行时规则：\`rule.buffer().optional()\`
   */
  byt_de: rule.buffer().optional(),
};
const userOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: rule.string(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().nullable()\`
   */
  name_nu: rule.string().nullable(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`"abc"\`
   *
   * 运行时规则：\`rule.string()\`
   */
  name_de: rule.string(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  age: rule.int(),
  /**
   * Prisma类型：\`Int?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int().nullable()\`
   */
  age_nu: rule.int().nullable(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.int()\`
   */
  age_de: rule.int(),
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj: rule.anyOf([rule.object(), rule.array()]),
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"{}"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj_de_obj: rule.anyOf([rule.object(), rule.array()]),
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"[]"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj_de_arr: rule.anyOf([rule.object(), rule.array()]),
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  deci: rule.number(),
  /**
   * Prisma类型：\`Decimal?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().nullable()\`
   */
  deci_nu: rule.number().nullable(),
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.number()\`
   */
  deci_de: rule.number(),
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  flo: rule.number(),
  /**
   * Prisma类型：\`Float?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().nullable()\`
   */
  flo_nu: rule.number().nullable(),
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：\`100.10000000000001\`
   *
   * 运行时规则：\`rule.number()\`
   */
  flo_de: rule.number(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`uuid(4)\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu: rule.uuid(["v4"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"])\`
   */
  uu_1: rule.uuid(["v1"]),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"])\`
   */
  uu_1_nu: rule.uuid(["v1"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"])\`
   */
  uu_2: rule.uuid(["v2"]),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"])\`
   */
  uu_2_nu: rule.uuid(["v2"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"])\`
   */
  uu_3: rule.uuid(["v3"]),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"])\`
   */
  uu_3_nu: rule.uuid(["v3"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu_4: rule.uuid(["v4"]),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu_4_nu: rule.uuid(["v4"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"])\`
   */
  uu_5: rule.uuid(["v5"]),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"])\`
   */
  uu_5_nu: rule.uuid(["v5"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string()\`
   */
  uu_6: rule.string(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string()\`
   */
  uu_6_nu: rule.string(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
   *
   * I am the comments
   */
  comme_ok: rule.string().docs({ description: "I am the comments" }),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  comme_fail: rule.string(),
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  lang: rule.enum(LanguageEnum),
  /**
   * Prisma类型：\`Language?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum).nullable()\`
   */
  lang_nu: rule.enum(LanguageEnum).nullable(),
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：\`"Typescript"\`
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  lang_de: rule.enum(LanguageEnum),
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time: rule.dateTime(),
  /**
   * Prisma类型：\`DateTime?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime().nullable()\`
   */
  time_nu: rule.dateTime().nullable(),
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：\`now()\`
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time_de: rule.dateTime(),
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo: rule.boolean(),
  /**
   * Prisma类型：\`Boolean?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean().nullable()\`
   */
  boo_nu: rule.boolean().nullable(),
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：\`true\`
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo_de: rule.boolean(),
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big: rule.bigint(),
  /**
   * Prisma类型：\`BigInt?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint().nullable()\`
   */
  big_nu: rule.bigint().nullable(),
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：\`"30"\`
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big_de: rule.bigint(),
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt: rule.buffer(),
  /**
   * Prisma类型：\`Bytes?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer().nullable()\`
   */
  byt_nu: rule.buffer().nullable(),
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：\`""\`
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt_de: rule.buffer(),
};
const profileInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: rule.int(),
};
const profileOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: rule.int(),
};
const postInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: rule.int(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: rule.string(),
};
const postOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: rule.int(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: rule.string(),
};
const aliasTableNameInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
};
const aliasTableNameOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
};

export const prismaInput = {
  user: {
    /** 所有字段对象 */
    columns: userInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(userInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(userInputColumns, ...keys);
    },
  },
  profile: {
    /** 所有字段对象 */
    columns: profileInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(profileInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(profileInputColumns, ...keys);
    },
  },
  post: {
    /** 所有字段对象 */
    columns: postInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(postInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(postInputColumns, ...keys);
    },
  },
  aliasTableName: {
    /** 所有字段对象 */
    columns: aliasTableNameInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(aliasTableNameInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(aliasTableNameInputColumns, ...keys);
    },
  },
};

export const prismaOutput = {
  user: {
    /** 所有字段对象 */
    columns: userOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(userOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(userOutputColumns, ...keys);
    },
  },
  profile: {
    /** 所有字段对象 */
    columns: profileOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(profileOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(profileOutputColumns, ...keys);
    },
  },
  post: {
    /** 所有字段对象 */
    columns: postOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(postOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(postOutputColumns, ...keys);
    },
  },
  aliasTableName: {
    /** 所有字段对象 */
    columns: aliasTableNameOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(aliasTableNameOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(aliasTableNameOutputColumns, ...keys);
    },
  },
};
"
`;

exports[`transform postgresql > .d.ts 1`] = `
"import {
  AnyOfValidator,
  BigIntValidator,
  BooleanValidator,
  BufferValidator,
  DateTimeValidator,
  EnumValidator,
  IntValidator,
  NumberValidator,
  StringValidator,
  UuidValidator,
  Validator,
} from "@aomex/common";
declare const userInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: StringValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  name_nu: StringValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`"abc"\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  name_de: StringValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  age: IntValidator<number>;
  /**
   * Prisma类型：\`Int?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  age_nu: IntValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  age_de: IntValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj: AnyOfValidator<
    | unknown[]
    | {
        [K: string]: unknown;
      }
  >;
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"{}"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()]).optional()\`
   */
  obj_de_obj: AnyOfValidator<
    | unknown[]
    | Validator.TOptional
    | {
        [K: string]: unknown;
      }
  >;
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"[]"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()]).optional()\`
   */
  obj_de_arr: AnyOfValidator<
    | unknown[]
    | Validator.TOptional
    | {
        [K: string]: unknown;
      }
  >;
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  deci: NumberValidator<number>;
  /**
   * Prisma类型：\`Decimal?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  deci_nu: NumberValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  deci_de: NumberValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  flo: NumberValidator<number>;
  /**
   * Prisma类型：\`Float?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  flo_nu: NumberValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：\`100.10000000000001\`
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  flo_de: NumberValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`uuid(4)\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"]).optional()\`
   */
  uu_1: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"]).optional()\`
   */
  uu_1_nu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"]).optional()\`
   */
  uu_2: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"]).optional()\`
   */
  uu_2_nu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"]).optional()\`
   */
  uu_3: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"]).optional()\`
   */
  uu_3_nu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu_4: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu_4_nu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"]).optional()\`
   */
  uu_5: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"]).optional()\`
   */
  uu_5_nu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  uu_6: StringValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  uu_6_nu: StringValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
   *
   * I am the comments
   */
  comme_ok: StringValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  comme_fail: StringValidator<string>;
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  lang: EnumValidator<
    "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp"
  >;
  /**
   * Prisma类型：\`Language?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum).optional()\`
   */
  lang_nu: EnumValidator<
    | Validator.TOptional
    | "Typescript"
    | "Javascript"
    | "Rust"
    | "Go"
    | "Python"
    | "Cpp"
  >;
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：\`"Typescript"\`
   *
   * 运行时规则：\`rule.enum(LanguageEnum).optional()\`
   */
  lang_de: EnumValidator<
    | Validator.TOptional
    | "Typescript"
    | "Javascript"
    | "Rust"
    | "Go"
    | "Python"
    | "Cpp"
  >;
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time: DateTimeValidator<Date>;
  /**
   * Prisma类型：\`DateTime?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime().optional()\`
   */
  time_nu: DateTimeValidator<Validator.TOptional | Date>;
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：\`now()\`
   *
   * 运行时规则：\`rule.dateTime().optional()\`
   */
  time_de: DateTimeValidator<Validator.TOptional | Date>;
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo: BooleanValidator<boolean>;
  /**
   * Prisma类型：\`Boolean?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean().optional()\`
   */
  boo_nu: BooleanValidator<boolean | Validator.TOptional>;
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：\`true\`
   *
   * 运行时规则：\`rule.boolean().optional()\`
   */
  boo_de: BooleanValidator<boolean | Validator.TOptional>;
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big: BigIntValidator<bigint>;
  /**
   * Prisma类型：\`BigInt?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint().optional()\`
   */
  big_nu: BigIntValidator<bigint | Validator.TOptional>;
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：\`"30"\`
   *
   * 运行时规则：\`rule.bigint().optional()\`
   */
  big_de: BigIntValidator<bigint | Validator.TOptional>;
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt: BufferValidator<Buffer>;
  /**
   * Prisma类型：\`Bytes?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer().optional()\`
   */
  byt_nu: BufferValidator<Validator.TOptional | Buffer>;
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：\`""\`
   *
   * 运行时规则：\`rule.buffer().optional()\`
   */
  byt_de: BufferValidator<Validator.TOptional | Buffer>;
};
declare const userOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: StringValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().nullable()\`
   */
  name_nu: StringValidator<string | null>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`"abc"\`
   *
   * 运行时规则：\`rule.string()\`
   */
  name_de: StringValidator<string>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  age: IntValidator<number>;
  /**
   * Prisma类型：\`Int?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int().nullable()\`
   */
  age_nu: IntValidator<number | null>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.int()\`
   */
  age_de: IntValidator<number>;
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj: AnyOfValidator<
    | unknown[]
    | {
        [K: string]: unknown;
      }
  >;
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"{}"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj_de_obj: AnyOfValidator<
    | unknown[]
    | {
        [K: string]: unknown;
      }
  >;
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"[]"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj_de_arr: AnyOfValidator<
    | unknown[]
    | {
        [K: string]: unknown;
      }
  >;
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  deci: NumberValidator<number>;
  /**
   * Prisma类型：\`Decimal?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().nullable()\`
   */
  deci_nu: NumberValidator<number | null>;
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.number()\`
   */
  deci_de: NumberValidator<number>;
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  flo: NumberValidator<number>;
  /**
   * Prisma类型：\`Float?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().nullable()\`
   */
  flo_nu: NumberValidator<number | null>;
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：\`100.10000000000001\`
   *
   * 运行时规则：\`rule.number()\`
   */
  flo_de: NumberValidator<number>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`uuid(4)\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"])\`
   */
  uu_1: UuidValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"])\`
   */
  uu_1_nu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"])\`
   */
  uu_2: UuidValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"])\`
   */
  uu_2_nu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"])\`
   */
  uu_3: UuidValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"])\`
   */
  uu_3_nu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu_4: UuidValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu_4_nu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"])\`
   */
  uu_5: UuidValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"])\`
   */
  uu_5_nu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string()\`
   */
  uu_6: StringValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string()\`
   */
  uu_6_nu: StringValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
   *
   * I am the comments
   */
  comme_ok: StringValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  comme_fail: StringValidator<string>;
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  lang: EnumValidator<
    "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp"
  >;
  /**
   * Prisma类型：\`Language?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum).nullable()\`
   */
  lang_nu: EnumValidator<
    "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp" | null
  >;
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：\`"Typescript"\`
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  lang_de: EnumValidator<
    "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp"
  >;
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time: DateTimeValidator<Date>;
  /**
   * Prisma类型：\`DateTime?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime().nullable()\`
   */
  time_nu: DateTimeValidator<Date | null>;
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：\`now()\`
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time_de: DateTimeValidator<Date>;
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo: BooleanValidator<boolean>;
  /**
   * Prisma类型：\`Boolean?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean().nullable()\`
   */
  boo_nu: BooleanValidator<boolean | null>;
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：\`true\`
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo_de: BooleanValidator<boolean>;
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big: BigIntValidator<bigint>;
  /**
   * Prisma类型：\`BigInt?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint().nullable()\`
   */
  big_nu: BigIntValidator<bigint | null>;
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：\`"30"\`
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big_de: BigIntValidator<bigint>;
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt: BufferValidator<Buffer>;
  /**
   * Prisma类型：\`Bytes?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer().nullable()\`
   */
  byt_nu: BufferValidator<Buffer | null>;
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：\`""\`
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt_de: BufferValidator<Buffer>;
};
declare const profileInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: IntValidator<number>;
};
declare const profileOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: IntValidator<number>;
};
declare const postInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: IntValidator<number>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: StringValidator<string>;
};
declare const postOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: IntValidator<number>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: StringValidator<string>;
};
declare const aliasTableNameInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
};
declare const aliasTableNameOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
};

export declare const prismaInput: {
  readonly user: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      name: StringValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string().optional()\`
       */
      name_nu: StringValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`"abc"\`
       *
       * 运行时规则：\`rule.string().optional()\`
       */
      name_de: StringValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      age: IntValidator<number>;
      /**
       * Prisma类型：\`Int?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      age_nu: IntValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`100\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      age_de: IntValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Json\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
       */
      obj: AnyOfValidator<
        | unknown[]
        | {
            [K: string]: unknown;
          }
      >;
      /**
       * Prisma类型：\`Json\`
       *
       * 数据库默认值：\`"{}"\`
       *
       * 运行时规则：\`rule.anyOf([rule.object(), rule.array()]).optional()\`
       */
      obj_de_obj: AnyOfValidator<
        | unknown[]
        | Validator.TOptional
        | {
            [K: string]: unknown;
          }
      >;
      /**
       * Prisma类型：\`Json\`
       *
       * 数据库默认值：\`"[]"\`
       *
       * 运行时规则：\`rule.anyOf([rule.object(), rule.array()]).optional()\`
       */
      obj_de_arr: AnyOfValidator<
        | unknown[]
        | Validator.TOptional
        | {
            [K: string]: unknown;
          }
      >;
      /**
       * Prisma类型：\`Decimal\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number()\`
       */
      deci: NumberValidator<number>;
      /**
       * Prisma类型：\`Decimal?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number().optional()\`
       */
      deci_nu: NumberValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Decimal\`
       *
       * 数据库默认值：\`100\`
       *
       * 运行时规则：\`rule.number().optional()\`
       */
      deci_de: NumberValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Float\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number()\`
       */
      flo: NumberValidator<number>;
      /**
       * Prisma类型：\`Float?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number().optional()\`
       */
      flo_nu: NumberValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Float\`
       *
       * 数据库默认值：\`100.10000000000001\`
       *
       * 运行时规则：\`rule.number().optional()\`
       */
      flo_de: NumberValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`uuid(4)\`
       *
       * 运行时规则：\`rule.uuid(["v4"]).optional()\`
       */
      uu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
       *
       * 运行时规则：\`rule.uuid(["v1"]).optional()\`
       */
      uu_1: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
       *
       * 运行时规则：\`rule.uuid(["v1"]).optional()\`
       */
      uu_1_nu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
       *
       * 运行时规则：\`rule.uuid(["v2"]).optional()\`
       */
      uu_2: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
       *
       * 运行时规则：\`rule.uuid(["v2"]).optional()\`
       */
      uu_2_nu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
       *
       * 运行时规则：\`rule.uuid(["v3"]).optional()\`
       */
      uu_3: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
       *
       * 运行时规则：\`rule.uuid(["v3"]).optional()\`
       */
      uu_3_nu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
       *
       * 运行时规则：\`rule.uuid(["v4"]).optional()\`
       */
      uu_4: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
       *
       * 运行时规则：\`rule.uuid(["v4"]).optional()\`
       */
      uu_4_nu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
       *
       * 运行时规则：\`rule.uuid(["v5"]).optional()\`
       */
      uu_5: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
       *
       * 运行时规则：\`rule.uuid(["v5"]).optional()\`
       */
      uu_5_nu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
       *
       * 运行时规则：\`rule.string().optional()\`
       */
      uu_6: StringValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
       *
       * 运行时规则：\`rule.string().optional()\`
       */
      uu_6_nu: StringValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
       *
       * I am the comments
       */
      comme_ok: StringValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      comme_fail: StringValidator<string>;
      /**
       * Prisma类型：\`Language\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.enum(LanguageEnum)\`
       */
      lang: EnumValidator<
        "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp"
      >;
      /**
       * Prisma类型：\`Language?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.enum(LanguageEnum).optional()\`
       */
      lang_nu: EnumValidator<
        | Validator.TOptional
        | "Typescript"
        | "Javascript"
        | "Rust"
        | "Go"
        | "Python"
        | "Cpp"
      >;
      /**
       * Prisma类型：\`Language\`
       *
       * 数据库默认值：\`"Typescript"\`
       *
       * 运行时规则：\`rule.enum(LanguageEnum).optional()\`
       */
      lang_de: EnumValidator<
        | Validator.TOptional
        | "Typescript"
        | "Javascript"
        | "Rust"
        | "Go"
        | "Python"
        | "Cpp"
      >;
      /**
       * Prisma类型：\`DateTime\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.dateTime()\`
       */
      time: DateTimeValidator<Date>;
      /**
       * Prisma类型：\`DateTime?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.dateTime().optional()\`
       */
      time_nu: DateTimeValidator<Validator.TOptional | Date>;
      /**
       * Prisma类型：\`DateTime\`
       *
       * 数据库默认值：\`now()\`
       *
       * 运行时规则：\`rule.dateTime().optional()\`
       */
      time_de: DateTimeValidator<Validator.TOptional | Date>;
      /**
       * Prisma类型：\`Boolean\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.boolean()\`
       */
      boo: BooleanValidator<boolean>;
      /**
       * Prisma类型：\`Boolean?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.boolean().optional()\`
       */
      boo_nu: BooleanValidator<boolean | Validator.TOptional>;
      /**
       * Prisma类型：\`Boolean\`
       *
       * 数据库默认值：\`true\`
       *
       * 运行时规则：\`rule.boolean().optional()\`
       */
      boo_de: BooleanValidator<boolean | Validator.TOptional>;
      /**
       * Prisma类型：\`BigInt\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.bigint()\`
       */
      big: BigIntValidator<bigint>;
      /**
       * Prisma类型：\`BigInt?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.bigint().optional()\`
       */
      big_nu: BigIntValidator<bigint | Validator.TOptional>;
      /**
       * Prisma类型：\`BigInt\`
       *
       * 数据库默认值：\`"30"\`
       *
       * 运行时规则：\`rule.bigint().optional()\`
       */
      big_de: BigIntValidator<bigint | Validator.TOptional>;
      /**
       * Prisma类型：\`Bytes\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.buffer()\`
       */
      byt: BufferValidator<Buffer>;
      /**
       * Prisma类型：\`Bytes?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.buffer().optional()\`
       */
      byt_nu: BufferValidator<Validator.TOptional | Buffer>;
      /**
       * Prisma类型：\`Bytes\`
       *
       * 数据库默认值：\`""\`
       *
       * 运行时规则：\`rule.buffer().optional()\`
       */
      byt_de: BufferValidator<Validator.TOptional | Buffer>;
    };
    /** 选择部分字段 */
    readonly pick: <
      Keys extends
        | "id"
        | "name"
        | "name_nu"
        | "name_de"
        | "age"
        | "age_nu"
        | "age_de"
        | "obj"
        | "obj_de_obj"
        | "obj_de_arr"
        | "deci"
        | "deci_nu"
        | "deci_de"
        | "flo"
        | "flo_nu"
        | "flo_de"
        | "uu"
        | "uu_1"
        | "uu_1_nu"
        | "uu_2"
        | "uu_2_nu"
        | "uu_3"
        | "uu_3_nu"
        | "uu_4"
        | "uu_4_nu"
        | "uu_5"
        | "uu_5_nu"
        | "uu_6"
        | "uu_6_nu"
        | "comme_ok"
        | "comme_fail"
        | "lang"
        | "lang_nu"
        | "lang_de"
        | "time"
        | "time_nu"
        | "time_de"
        | "boo"
        | "boo_nu"
        | "boo_de"
        | "big"
        | "big_nu"
        | "big_de"
        | "byt"
        | "byt_nu"
        | "byt_de",
    >(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof userInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <
      Keys extends
        | "id"
        | "name"
        | "name_nu"
        | "name_de"
        | "age"
        | "age_nu"
        | "age_de"
        | "obj"
        | "obj_de_obj"
        | "obj_de_arr"
        | "deci"
        | "deci_nu"
        | "deci_de"
        | "flo"
        | "flo_nu"
        | "flo_de"
        | "uu"
        | "uu_1"
        | "uu_1_nu"
        | "uu_2"
        | "uu_2_nu"
        | "uu_3"
        | "uu_3_nu"
        | "uu_4"
        | "uu_4_nu"
        | "uu_5"
        | "uu_5_nu"
        | "uu_6"
        | "uu_6_nu"
        | "comme_ok"
        | "comme_fail"
        | "lang"
        | "lang_nu"
        | "lang_de"
        | "time"
        | "time_nu"
        | "time_de"
        | "boo"
        | "boo_nu"
        | "boo_de"
        | "big"
        | "big_nu"
        | "big_de"
        | "byt"
        | "byt_nu"
        | "byt_de",
    >(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof userInputColumns as K extends Keys
        ? never
        : K]: (typeof userInputColumns)[K];
    };
  };
  readonly profile: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      user_id: IntValidator<number>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id" | "user_id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof profileInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id" | "user_id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof profileInputColumns as K extends Keys
        ? never
        : K]: (typeof profileInputColumns)[K];
    };
  };
  readonly post: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      user_id: IntValidator<number>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      name: StringValidator<string>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id" | "user_id" | "name">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof postInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id" | "user_id" | "name">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof postInputColumns as K extends Keys
        ? never
        : K]: (typeof postInputColumns)[K];
    };
  };
  readonly aliasTableName: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof aliasTableNameInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof aliasTableNameInputColumns as K extends Keys
        ? never
        : K]: (typeof aliasTableNameInputColumns)[K];
    };
  };
};

export declare const prismaOutput: {
  readonly user: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      name: StringValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string().nullable()\`
       */
      name_nu: StringValidator<string | null>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`"abc"\`
       *
       * 运行时规则：\`rule.string()\`
       */
      name_de: StringValidator<string>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      age: IntValidator<number>;
      /**
       * Prisma类型：\`Int?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int().nullable()\`
       */
      age_nu: IntValidator<number | null>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`100\`
       *
       * 运行时规则：\`rule.int()\`
       */
      age_de: IntValidator<number>;
      /**
       * Prisma类型：\`Json\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
       */
      obj: AnyOfValidator<
        | unknown[]
        | {
            [K: string]: unknown;
          }
      >;
      /**
       * Prisma类型：\`Json\`
       *
       * 数据库默认值：\`"{}"\`
       *
       * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
       */
      obj_de_obj: AnyOfValidator<
        | unknown[]
        | {
            [K: string]: unknown;
          }
      >;
      /**
       * Prisma类型：\`Json\`
       *
       * 数据库默认值：\`"[]"\`
       *
       * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
       */
      obj_de_arr: AnyOfValidator<
        | unknown[]
        | {
            [K: string]: unknown;
          }
      >;
      /**
       * Prisma类型：\`Decimal\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number()\`
       */
      deci: NumberValidator<number>;
      /**
       * Prisma类型：\`Decimal?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number().nullable()\`
       */
      deci_nu: NumberValidator<number | null>;
      /**
       * Prisma类型：\`Decimal\`
       *
       * 数据库默认值：\`100\`
       *
       * 运行时规则：\`rule.number()\`
       */
      deci_de: NumberValidator<number>;
      /**
       * Prisma类型：\`Float\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number()\`
       */
      flo: NumberValidator<number>;
      /**
       * Prisma类型：\`Float?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number().nullable()\`
       */
      flo_nu: NumberValidator<number | null>;
      /**
       * Prisma类型：\`Float\`
       *
       * 数据库默认值：\`100.10000000000001\`
       *
       * 运行时规则：\`rule.number()\`
       */
      flo_de: NumberValidator<number>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`uuid(4)\`
       *
       * 运行时规则：\`rule.uuid(["v4"])\`
       */
      uu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
       *
       * 运行时规则：\`rule.uuid(["v1"])\`
       */
      uu_1: UuidValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
       *
       * 运行时规则：\`rule.uuid(["v1"])\`
       */
      uu_1_nu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
       *
       * 运行时规则：\`rule.uuid(["v2"])\`
       */
      uu_2: UuidValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
       *
       * 运行时规则：\`rule.uuid(["v2"])\`
       */
      uu_2_nu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
       *
       * 运行时规则：\`rule.uuid(["v3"])\`
       */
      uu_3: UuidValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
       *
       * 运行时规则：\`rule.uuid(["v3"])\`
       */
      uu_3_nu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
       *
       * 运行时规则：\`rule.uuid(["v4"])\`
       */
      uu_4: UuidValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
       *
       * 运行时规则：\`rule.uuid(["v4"])\`
       */
      uu_4_nu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
       *
       * 运行时规则：\`rule.uuid(["v5"])\`
       */
      uu_5: UuidValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
       *
       * 运行时规则：\`rule.uuid(["v5"])\`
       */
      uu_5_nu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
       *
       * 运行时规则：\`rule.string()\`
       */
      uu_6: StringValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
       *
       * 运行时规则：\`rule.string()\`
       */
      uu_6_nu: StringValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
       *
       * I am the comments
       */
      comme_ok: StringValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      comme_fail: StringValidator<string>;
      /**
       * Prisma类型：\`Language\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.enum(LanguageEnum)\`
       */
      lang: EnumValidator<
        "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp"
      >;
      /**
       * Prisma类型：\`Language?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.enum(LanguageEnum).nullable()\`
       */
      lang_nu: EnumValidator<
        "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp" | null
      >;
      /**
       * Prisma类型：\`Language\`
       *
       * 数据库默认值：\`"Typescript"\`
       *
       * 运行时规则：\`rule.enum(LanguageEnum)\`
       */
      lang_de: EnumValidator<
        "Typescript" | "Javascript" | "Rust" | "Go" | "Python" | "Cpp"
      >;
      /**
       * Prisma类型：\`DateTime\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.dateTime()\`
       */
      time: DateTimeValidator<Date>;
      /**
       * Prisma类型：\`DateTime?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.dateTime().nullable()\`
       */
      time_nu: DateTimeValidator<Date | null>;
      /**
       * Prisma类型：\`DateTime\`
       *
       * 数据库默认值：\`now()\`
       *
       * 运行时规则：\`rule.dateTime()\`
       */
      time_de: DateTimeValidator<Date>;
      /**
       * Prisma类型：\`Boolean\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.boolean()\`
       */
      boo: BooleanValidator<boolean>;
      /**
       * Prisma类型：\`Boolean?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.boolean().nullable()\`
       */
      boo_nu: BooleanValidator<boolean | null>;
      /**
       * Prisma类型：\`Boolean\`
       *
       * 数据库默认值：\`true\`
       *
       * 运行时规则：\`rule.boolean()\`
       */
      boo_de: BooleanValidator<boolean>;
      /**
       * Prisma类型：\`BigInt\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.bigint()\`
       */
      big: BigIntValidator<bigint>;
      /**
       * Prisma类型：\`BigInt?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.bigint().nullable()\`
       */
      big_nu: BigIntValidator<bigint | null>;
      /**
       * Prisma类型：\`BigInt\`
       *
       * 数据库默认值：\`"30"\`
       *
       * 运行时规则：\`rule.bigint()\`
       */
      big_de: BigIntValidator<bigint>;
      /**
       * Prisma类型：\`Bytes\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.buffer()\`
       */
      byt: BufferValidator<Buffer>;
      /**
       * Prisma类型：\`Bytes?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.buffer().nullable()\`
       */
      byt_nu: BufferValidator<Buffer | null>;
      /**
       * Prisma类型：\`Bytes\`
       *
       * 数据库默认值：\`""\`
       *
       * 运行时规则：\`rule.buffer()\`
       */
      byt_de: BufferValidator<Buffer>;
    };
    /** 选择部分字段 */
    readonly pick: <
      Keys extends
        | "id"
        | "name"
        | "name_nu"
        | "name_de"
        | "age"
        | "age_nu"
        | "age_de"
        | "obj"
        | "obj_de_obj"
        | "obj_de_arr"
        | "deci"
        | "deci_nu"
        | "deci_de"
        | "flo"
        | "flo_nu"
        | "flo_de"
        | "uu"
        | "uu_1"
        | "uu_1_nu"
        | "uu_2"
        | "uu_2_nu"
        | "uu_3"
        | "uu_3_nu"
        | "uu_4"
        | "uu_4_nu"
        | "uu_5"
        | "uu_5_nu"
        | "uu_6"
        | "uu_6_nu"
        | "comme_ok"
        | "comme_fail"
        | "lang"
        | "lang_nu"
        | "lang_de"
        | "time"
        | "time_nu"
        | "time_de"
        | "boo"
        | "boo_nu"
        | "boo_de"
        | "big"
        | "big_nu"
        | "big_de"
        | "byt"
        | "byt_nu"
        | "byt_de",
    >(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof userOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <
      Keys extends
        | "id"
        | "name"
        | "name_nu"
        | "name_de"
        | "age"
        | "age_nu"
        | "age_de"
        | "obj"
        | "obj_de_obj"
        | "obj_de_arr"
        | "deci"
        | "deci_nu"
        | "deci_de"
        | "flo"
        | "flo_nu"
        | "flo_de"
        | "uu"
        | "uu_1"
        | "uu_1_nu"
        | "uu_2"
        | "uu_2_nu"
        | "uu_3"
        | "uu_3_nu"
        | "uu_4"
        | "uu_4_nu"
        | "uu_5"
        | "uu_5_nu"
        | "uu_6"
        | "uu_6_nu"
        | "comme_ok"
        | "comme_fail"
        | "lang"
        | "lang_nu"
        | "lang_de"
        | "time"
        | "time_nu"
        | "time_de"
        | "boo"
        | "boo_nu"
        | "boo_de"
        | "big"
        | "big_nu"
        | "big_de"
        | "byt"
        | "byt_nu"
        | "byt_de",
    >(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof userOutputColumns as K extends Keys
        ? never
        : K]: (typeof userOutputColumns)[K];
    };
  };
  readonly profile: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      user_id: IntValidator<number>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id" | "user_id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof profileOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id" | "user_id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof profileOutputColumns as K extends Keys
        ? never
        : K]: (typeof profileOutputColumns)[K];
    };
  };
  readonly post: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      user_id: IntValidator<number>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      name: StringValidator<string>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id" | "user_id" | "name">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof postOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id" | "user_id" | "name">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof postOutputColumns as K extends Keys
        ? never
        : K]: (typeof postOutputColumns)[K];
    };
  };
  readonly aliasTableName: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof aliasTableNameOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof aliasTableNameOutputColumns as K extends Keys
        ? never
        : K]: (typeof aliasTableNameOutputColumns)[K];
    };
  };
};
export {};
"
`;

exports[`transform postgresql > .js 1`] = `
"import { rule } from "@aomex/common";
function pick(obj, ...keys) {
  const subObj = {};
  for (const key of keys) {
    if (Object.hasOwn(obj, key)) {
      subObj[key] = obj[key];
    }
  }
  return subObj;
}
function omit(obj, ...keys) {
  return pick(obj, ...Object.keys(obj).filter((key) => !keys.includes(key)));
}
const LanguageEnum = [
  "Typescript",
  "Javascript",
  "Rust",
  "Go",
  "Python",
  "Cpp",
];
const userInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: rule.string(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  name_nu: rule.string().optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`"abc"\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  name_de: rule.string().optional(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  age: rule.int(),
  /**
   * Prisma类型：\`Int?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  age_nu: rule.int().optional(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  age_de: rule.int().optional(),
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj: rule.anyOf([rule.object(), rule.array()]),
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"{}"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()]).optional()\`
   */
  obj_de_obj: rule.anyOf([rule.object(), rule.array()]).optional(),
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"[]"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()]).optional()\`
   */
  obj_de_arr: rule.anyOf([rule.object(), rule.array()]).optional(),
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  deci: rule.number(),
  /**
   * Prisma类型：\`Decimal?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  deci_nu: rule.number().optional(),
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  deci_de: rule.number().optional(),
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  flo: rule.number(),
  /**
   * Prisma类型：\`Float?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  flo_nu: rule.number().optional(),
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：\`100.10000000000001\`
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  flo_de: rule.number().optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`uuid(4)\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu: rule.uuid(["v4"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"]).optional()\`
   */
  uu_1: rule.uuid(["v1"]).optional(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"]).optional()\`
   */
  uu_1_nu: rule.uuid(["v1"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"]).optional()\`
   */
  uu_2: rule.uuid(["v2"]).optional(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"]).optional()\`
   */
  uu_2_nu: rule.uuid(["v2"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"]).optional()\`
   */
  uu_3: rule.uuid(["v3"]).optional(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"]).optional()\`
   */
  uu_3_nu: rule.uuid(["v3"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu_4: rule.uuid(["v4"]).optional(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu_4_nu: rule.uuid(["v4"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"]).optional()\`
   */
  uu_5: rule.uuid(["v5"]).optional(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"]).optional()\`
   */
  uu_5_nu: rule.uuid(["v5"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  uu_6: rule.string().optional(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  uu_6_nu: rule.string().optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
   *
   * I am the comments
   */
  comme_ok: rule.string().docs({ description: "I am the comments" }),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  comme_fail: rule.string(),
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  lang: rule.enum(LanguageEnum),
  /**
   * Prisma类型：\`Language?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum).optional()\`
   */
  lang_nu: rule.enum(LanguageEnum).optional(),
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：\`"Typescript"\`
   *
   * 运行时规则：\`rule.enum(LanguageEnum).optional()\`
   */
  lang_de: rule.enum(LanguageEnum).optional(),
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time: rule.dateTime(),
  /**
   * Prisma类型：\`DateTime?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime().optional()\`
   */
  time_nu: rule.dateTime().optional(),
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：\`now()\`
   *
   * 运行时规则：\`rule.dateTime().optional()\`
   */
  time_de: rule.dateTime().optional(),
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo: rule.boolean(),
  /**
   * Prisma类型：\`Boolean?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean().optional()\`
   */
  boo_nu: rule.boolean().optional(),
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：\`true\`
   *
   * 运行时规则：\`rule.boolean().optional()\`
   */
  boo_de: rule.boolean().optional(),
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big: rule.bigint(),
  /**
   * Prisma类型：\`BigInt?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint().optional()\`
   */
  big_nu: rule.bigint().optional(),
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：\`"30"\`
   *
   * 运行时规则：\`rule.bigint().optional()\`
   */
  big_de: rule.bigint().optional(),
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt: rule.buffer(),
  /**
   * Prisma类型：\`Bytes?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer().optional()\`
   */
  byt_nu: rule.buffer().optional(),
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：\`""\`
   *
   * 运行时规则：\`rule.buffer().optional()\`
   */
  byt_de: rule.buffer().optional(),
};
const userOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: rule.string(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().nullable()\`
   */
  name_nu: rule.string().nullable(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`"abc"\`
   *
   * 运行时规则：\`rule.string()\`
   */
  name_de: rule.string(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  age: rule.int(),
  /**
   * Prisma类型：\`Int?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int().nullable()\`
   */
  age_nu: rule.int().nullable(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.int()\`
   */
  age_de: rule.int(),
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj: rule.anyOf([rule.object(), rule.array()]),
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"{}"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj_de_obj: rule.anyOf([rule.object(), rule.array()]),
  /**
   * Prisma类型：\`Json\`
   *
   * 数据库默认值：\`"[]"\`
   *
   * 运行时规则：\`rule.anyOf([rule.object(), rule.array()])\`
   */
  obj_de_arr: rule.anyOf([rule.object(), rule.array()]),
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  deci: rule.number(),
  /**
   * Prisma类型：\`Decimal?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().nullable()\`
   */
  deci_nu: rule.number().nullable(),
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.number()\`
   */
  deci_de: rule.number(),
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  flo: rule.number(),
  /**
   * Prisma类型：\`Float?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().nullable()\`
   */
  flo_nu: rule.number().nullable(),
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：\`100.10000000000001\`
   *
   * 运行时规则：\`rule.number()\`
   */
  flo_de: rule.number(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`uuid(4)\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu: rule.uuid(["v4"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"])\`
   */
  uu_1: rule.uuid(["v1"]),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"])\`
   */
  uu_1_nu: rule.uuid(["v1"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"])\`
   */
  uu_2: rule.uuid(["v2"]),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"])\`
   */
  uu_2_nu: rule.uuid(["v2"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"])\`
   */
  uu_3: rule.uuid(["v3"]),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"])\`
   */
  uu_3_nu: rule.uuid(["v3"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu_4: rule.uuid(["v4"]),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu_4_nu: rule.uuid(["v4"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"])\`
   */
  uu_5: rule.uuid(["v5"]),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"])\`
   */
  uu_5_nu: rule.uuid(["v5"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string()\`
   */
  uu_6: rule.string(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string()\`
   */
  uu_6_nu: rule.string(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
   *
   * I am the comments
   */
  comme_ok: rule.string().docs({ description: "I am the comments" }),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  comme_fail: rule.string(),
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  lang: rule.enum(LanguageEnum),
  /**
   * Prisma类型：\`Language?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.enum(LanguageEnum).nullable()\`
   */
  lang_nu: rule.enum(LanguageEnum).nullable(),
  /**
   * Prisma类型：\`Language\`
   *
   * 数据库默认值：\`"Typescript"\`
   *
   * 运行时规则：\`rule.enum(LanguageEnum)\`
   */
  lang_de: rule.enum(LanguageEnum),
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time: rule.dateTime(),
  /**
   * Prisma类型：\`DateTime?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime().nullable()\`
   */
  time_nu: rule.dateTime().nullable(),
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：\`now()\`
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time_de: rule.dateTime(),
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo: rule.boolean(),
  /**
   * Prisma类型：\`Boolean?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean().nullable()\`
   */
  boo_nu: rule.boolean().nullable(),
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：\`true\`
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo_de: rule.boolean(),
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big: rule.bigint(),
  /**
   * Prisma类型：\`BigInt?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint().nullable()\`
   */
  big_nu: rule.bigint().nullable(),
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：\`"30"\`
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big_de: rule.bigint(),
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt: rule.buffer(),
  /**
   * Prisma类型：\`Bytes?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer().nullable()\`
   */
  byt_nu: rule.buffer().nullable(),
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：\`""\`
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt_de: rule.buffer(),
};
const profileInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: rule.int(),
};
const profileOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: rule.int(),
};
const postInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: rule.int(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: rule.string(),
};
const postOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: rule.int(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: rule.string(),
};
const aliasTableNameInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
};
const aliasTableNameOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
};

export const prismaInput = {
  user: {
    /** 所有字段对象 */
    columns: userInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(userInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(userInputColumns, ...keys);
    },
  },
  profile: {
    /** 所有字段对象 */
    columns: profileInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(profileInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(profileInputColumns, ...keys);
    },
  },
  post: {
    /** 所有字段对象 */
    columns: postInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(postInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(postInputColumns, ...keys);
    },
  },
  aliasTableName: {
    /** 所有字段对象 */
    columns: aliasTableNameInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(aliasTableNameInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(aliasTableNameInputColumns, ...keys);
    },
  },
};

export const prismaOutput = {
  user: {
    /** 所有字段对象 */
    columns: userOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(userOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(userOutputColumns, ...keys);
    },
  },
  profile: {
    /** 所有字段对象 */
    columns: profileOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(profileOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(profileOutputColumns, ...keys);
    },
  },
  post: {
    /** 所有字段对象 */
    columns: postOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(postOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(postOutputColumns, ...keys);
    },
  },
  aliasTableName: {
    /** 所有字段对象 */
    columns: aliasTableNameOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(aliasTableNameOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(aliasTableNameOutputColumns, ...keys);
    },
  },
};
"
`;

exports[`transform sqlite > .d.ts 1`] = `
"import {
  BigIntValidator,
  BooleanValidator,
  BufferValidator,
  DateTimeValidator,
  IntValidator,
  NumberValidator,
  StringValidator,
  UuidValidator,
  Validator,
} from "@aomex/common";
declare const userInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: StringValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  name_nu: StringValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`"abc"\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  name_de: StringValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  age: IntValidator<number>;
  /**
   * Prisma类型：\`Int?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  age_nu: IntValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  age_de: IntValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  deci: NumberValidator<number>;
  /**
   * Prisma类型：\`Decimal?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  deci_nu: NumberValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  deci_de: NumberValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  flo: NumberValidator<number>;
  /**
   * Prisma类型：\`Float?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  flo_nu: NumberValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：\`100.10000000000001\`
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  flo_de: NumberValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`uuid(4)\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"]).optional()\`
   */
  uu_1: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"]).optional()\`
   */
  uu_1_nu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"]).optional()\`
   */
  uu_2: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"]).optional()\`
   */
  uu_2_nu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"]).optional()\`
   */
  uu_3: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"]).optional()\`
   */
  uu_3_nu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu_4: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu_4_nu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"]).optional()\`
   */
  uu_5: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"]).optional()\`
   */
  uu_5_nu: UuidValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  uu_6: StringValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  uu_6_nu: StringValidator<string | Validator.TOptional>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
   *
   * I am the comments
   */
  comme_ok: StringValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  comme_fail: StringValidator<string>;
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time: DateTimeValidator<Date>;
  /**
   * Prisma类型：\`DateTime?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime().optional()\`
   */
  time_nu: DateTimeValidator<Validator.TOptional | Date>;
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：\`now()\`
   *
   * 运行时规则：\`rule.dateTime().optional()\`
   */
  time_de: DateTimeValidator<Validator.TOptional | Date>;
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo: BooleanValidator<boolean>;
  /**
   * Prisma类型：\`Boolean?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean().optional()\`
   */
  boo_nu: BooleanValidator<boolean | Validator.TOptional>;
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：\`true\`
   *
   * 运行时规则：\`rule.boolean().optional()\`
   */
  boo_de: BooleanValidator<boolean | Validator.TOptional>;
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big: BigIntValidator<bigint>;
  /**
   * Prisma类型：\`BigInt?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint().optional()\`
   */
  big_nu: BigIntValidator<bigint | Validator.TOptional>;
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：\`"30"\`
   *
   * 运行时规则：\`rule.bigint().optional()\`
   */
  big_de: BigIntValidator<bigint | Validator.TOptional>;
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt: BufferValidator<Buffer>;
  /**
   * Prisma类型：\`Bytes?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer().optional()\`
   */
  byt_nu: BufferValidator<Validator.TOptional | Buffer>;
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：\`""\`
   *
   * 运行时规则：\`rule.buffer().optional()\`
   */
  byt_de: BufferValidator<Validator.TOptional | Buffer>;
};
declare const userOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: StringValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().nullable()\`
   */
  name_nu: StringValidator<string | null>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`"abc"\`
   *
   * 运行时规则：\`rule.string()\`
   */
  name_de: StringValidator<string>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  age: IntValidator<number>;
  /**
   * Prisma类型：\`Int?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int().nullable()\`
   */
  age_nu: IntValidator<number | null>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.int()\`
   */
  age_de: IntValidator<number>;
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  deci: NumberValidator<number>;
  /**
   * Prisma类型：\`Decimal?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().nullable()\`
   */
  deci_nu: NumberValidator<number | null>;
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.number()\`
   */
  deci_de: NumberValidator<number>;
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  flo: NumberValidator<number>;
  /**
   * Prisma类型：\`Float?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().nullable()\`
   */
  flo_nu: NumberValidator<number | null>;
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：\`100.10000000000001\`
   *
   * 运行时规则：\`rule.number()\`
   */
  flo_de: NumberValidator<number>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`uuid(4)\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"])\`
   */
  uu_1: UuidValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"])\`
   */
  uu_1_nu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"])\`
   */
  uu_2: UuidValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"])\`
   */
  uu_2_nu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"])\`
   */
  uu_3: UuidValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"])\`
   */
  uu_3_nu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu_4: UuidValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu_4_nu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"])\`
   */
  uu_5: UuidValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"])\`
   */
  uu_5_nu: UuidValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string()\`
   */
  uu_6: StringValidator<string>;
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string()\`
   */
  uu_6_nu: StringValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
   *
   * I am the comments
   */
  comme_ok: StringValidator<string>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  comme_fail: StringValidator<string>;
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time: DateTimeValidator<Date>;
  /**
   * Prisma类型：\`DateTime?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime().nullable()\`
   */
  time_nu: DateTimeValidator<Date | null>;
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：\`now()\`
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time_de: DateTimeValidator<Date>;
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo: BooleanValidator<boolean>;
  /**
   * Prisma类型：\`Boolean?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean().nullable()\`
   */
  boo_nu: BooleanValidator<boolean | null>;
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：\`true\`
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo_de: BooleanValidator<boolean>;
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big: BigIntValidator<bigint>;
  /**
   * Prisma类型：\`BigInt?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint().nullable()\`
   */
  big_nu: BigIntValidator<bigint | null>;
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：\`"30"\`
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big_de: BigIntValidator<bigint>;
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt: BufferValidator<Buffer>;
  /**
   * Prisma类型：\`Bytes?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer().nullable()\`
   */
  byt_nu: BufferValidator<Buffer | null>;
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：\`""\`
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt_de: BufferValidator<Buffer>;
};
declare const profileInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: IntValidator<number>;
};
declare const profileOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: IntValidator<number>;
};
declare const postInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: IntValidator<number>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: StringValidator<string>;
};
declare const postOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: IntValidator<number>;
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: StringValidator<string>;
};
declare const aliasTableNameInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
};
declare const aliasTableNameOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
};

export declare const prismaInput: {
  readonly user: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      name: StringValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string().optional()\`
       */
      name_nu: StringValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`"abc"\`
       *
       * 运行时规则：\`rule.string().optional()\`
       */
      name_de: StringValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      age: IntValidator<number>;
      /**
       * Prisma类型：\`Int?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      age_nu: IntValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`100\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      age_de: IntValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Decimal\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number()\`
       */
      deci: NumberValidator<number>;
      /**
       * Prisma类型：\`Decimal?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number().optional()\`
       */
      deci_nu: NumberValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Decimal\`
       *
       * 数据库默认值：\`100\`
       *
       * 运行时规则：\`rule.number().optional()\`
       */
      deci_de: NumberValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Float\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number()\`
       */
      flo: NumberValidator<number>;
      /**
       * Prisma类型：\`Float?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number().optional()\`
       */
      flo_nu: NumberValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Float\`
       *
       * 数据库默认值：\`100.10000000000001\`
       *
       * 运行时规则：\`rule.number().optional()\`
       */
      flo_de: NumberValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`uuid(4)\`
       *
       * 运行时规则：\`rule.uuid(["v4"]).optional()\`
       */
      uu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
       *
       * 运行时规则：\`rule.uuid(["v1"]).optional()\`
       */
      uu_1: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
       *
       * 运行时规则：\`rule.uuid(["v1"]).optional()\`
       */
      uu_1_nu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
       *
       * 运行时规则：\`rule.uuid(["v2"]).optional()\`
       */
      uu_2: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
       *
       * 运行时规则：\`rule.uuid(["v2"]).optional()\`
       */
      uu_2_nu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
       *
       * 运行时规则：\`rule.uuid(["v3"]).optional()\`
       */
      uu_3: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
       *
       * 运行时规则：\`rule.uuid(["v3"]).optional()\`
       */
      uu_3_nu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
       *
       * 运行时规则：\`rule.uuid(["v4"]).optional()\`
       */
      uu_4: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
       *
       * 运行时规则：\`rule.uuid(["v4"]).optional()\`
       */
      uu_4_nu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
       *
       * 运行时规则：\`rule.uuid(["v5"]).optional()\`
       */
      uu_5: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
       *
       * 运行时规则：\`rule.uuid(["v5"]).optional()\`
       */
      uu_5_nu: UuidValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
       *
       * 运行时规则：\`rule.string().optional()\`
       */
      uu_6: StringValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
       *
       * 运行时规则：\`rule.string().optional()\`
       */
      uu_6_nu: StringValidator<string | Validator.TOptional>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
       *
       * I am the comments
       */
      comme_ok: StringValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      comme_fail: StringValidator<string>;
      /**
       * Prisma类型：\`DateTime\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.dateTime()\`
       */
      time: DateTimeValidator<Date>;
      /**
       * Prisma类型：\`DateTime?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.dateTime().optional()\`
       */
      time_nu: DateTimeValidator<Validator.TOptional | Date>;
      /**
       * Prisma类型：\`DateTime\`
       *
       * 数据库默认值：\`now()\`
       *
       * 运行时规则：\`rule.dateTime().optional()\`
       */
      time_de: DateTimeValidator<Validator.TOptional | Date>;
      /**
       * Prisma类型：\`Boolean\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.boolean()\`
       */
      boo: BooleanValidator<boolean>;
      /**
       * Prisma类型：\`Boolean?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.boolean().optional()\`
       */
      boo_nu: BooleanValidator<boolean | Validator.TOptional>;
      /**
       * Prisma类型：\`Boolean\`
       *
       * 数据库默认值：\`true\`
       *
       * 运行时规则：\`rule.boolean().optional()\`
       */
      boo_de: BooleanValidator<boolean | Validator.TOptional>;
      /**
       * Prisma类型：\`BigInt\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.bigint()\`
       */
      big: BigIntValidator<bigint>;
      /**
       * Prisma类型：\`BigInt?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.bigint().optional()\`
       */
      big_nu: BigIntValidator<bigint | Validator.TOptional>;
      /**
       * Prisma类型：\`BigInt\`
       *
       * 数据库默认值：\`"30"\`
       *
       * 运行时规则：\`rule.bigint().optional()\`
       */
      big_de: BigIntValidator<bigint | Validator.TOptional>;
      /**
       * Prisma类型：\`Bytes\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.buffer()\`
       */
      byt: BufferValidator<Buffer>;
      /**
       * Prisma类型：\`Bytes?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.buffer().optional()\`
       */
      byt_nu: BufferValidator<Validator.TOptional | Buffer>;
      /**
       * Prisma类型：\`Bytes\`
       *
       * 数据库默认值：\`""\`
       *
       * 运行时规则：\`rule.buffer().optional()\`
       */
      byt_de: BufferValidator<Validator.TOptional | Buffer>;
    };
    /** 选择部分字段 */
    readonly pick: <
      Keys extends
        | "id"
        | "name"
        | "name_nu"
        | "name_de"
        | "age"
        | "age_nu"
        | "age_de"
        | "deci"
        | "deci_nu"
        | "deci_de"
        | "flo"
        | "flo_nu"
        | "flo_de"
        | "uu"
        | "uu_1"
        | "uu_1_nu"
        | "uu_2"
        | "uu_2_nu"
        | "uu_3"
        | "uu_3_nu"
        | "uu_4"
        | "uu_4_nu"
        | "uu_5"
        | "uu_5_nu"
        | "uu_6"
        | "uu_6_nu"
        | "comme_ok"
        | "comme_fail"
        | "time"
        | "time_nu"
        | "time_de"
        | "boo"
        | "boo_nu"
        | "boo_de"
        | "big"
        | "big_nu"
        | "big_de"
        | "byt"
        | "byt_nu"
        | "byt_de",
    >(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof userInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <
      Keys extends
        | "id"
        | "name"
        | "name_nu"
        | "name_de"
        | "age"
        | "age_nu"
        | "age_de"
        | "deci"
        | "deci_nu"
        | "deci_de"
        | "flo"
        | "flo_nu"
        | "flo_de"
        | "uu"
        | "uu_1"
        | "uu_1_nu"
        | "uu_2"
        | "uu_2_nu"
        | "uu_3"
        | "uu_3_nu"
        | "uu_4"
        | "uu_4_nu"
        | "uu_5"
        | "uu_5_nu"
        | "uu_6"
        | "uu_6_nu"
        | "comme_ok"
        | "comme_fail"
        | "time"
        | "time_nu"
        | "time_de"
        | "boo"
        | "boo_nu"
        | "boo_de"
        | "big"
        | "big_nu"
        | "big_de"
        | "byt"
        | "byt_nu"
        | "byt_de",
    >(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof userInputColumns as K extends Keys
        ? never
        : K]: (typeof userInputColumns)[K];
    };
  };
  readonly profile: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      user_id: IntValidator<number>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id" | "user_id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof profileInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id" | "user_id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof profileInputColumns as K extends Keys
        ? never
        : K]: (typeof profileInputColumns)[K];
    };
  };
  readonly post: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      user_id: IntValidator<number>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      name: StringValidator<string>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id" | "user_id" | "name">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof postInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id" | "user_id" | "name">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof postInputColumns as K extends Keys
        ? never
        : K]: (typeof postInputColumns)[K];
    };
  };
  readonly aliasTableName: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof aliasTableNameInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof aliasTableNameInputColumns as K extends Keys
        ? never
        : K]: (typeof aliasTableNameInputColumns)[K];
    };
  };
};

export declare const prismaOutput: {
  readonly user: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      name: StringValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string().nullable()\`
       */
      name_nu: StringValidator<string | null>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`"abc"\`
       *
       * 运行时规则：\`rule.string()\`
       */
      name_de: StringValidator<string>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      age: IntValidator<number>;
      /**
       * Prisma类型：\`Int?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int().nullable()\`
       */
      age_nu: IntValidator<number | null>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`100\`
       *
       * 运行时规则：\`rule.int()\`
       */
      age_de: IntValidator<number>;
      /**
       * Prisma类型：\`Decimal\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number()\`
       */
      deci: NumberValidator<number>;
      /**
       * Prisma类型：\`Decimal?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number().nullable()\`
       */
      deci_nu: NumberValidator<number | null>;
      /**
       * Prisma类型：\`Decimal\`
       *
       * 数据库默认值：\`100\`
       *
       * 运行时规则：\`rule.number()\`
       */
      deci_de: NumberValidator<number>;
      /**
       * Prisma类型：\`Float\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number()\`
       */
      flo: NumberValidator<number>;
      /**
       * Prisma类型：\`Float?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.number().nullable()\`
       */
      flo_nu: NumberValidator<number | null>;
      /**
       * Prisma类型：\`Float\`
       *
       * 数据库默认值：\`100.10000000000001\`
       *
       * 运行时规则：\`rule.number()\`
       */
      flo_de: NumberValidator<number>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`uuid(4)\`
       *
       * 运行时规则：\`rule.uuid(["v4"])\`
       */
      uu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
       *
       * 运行时规则：\`rule.uuid(["v1"])\`
       */
      uu_1: UuidValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
       *
       * 运行时规则：\`rule.uuid(["v1"])\`
       */
      uu_1_nu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
       *
       * 运行时规则：\`rule.uuid(["v2"])\`
       */
      uu_2: UuidValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
       *
       * 运行时规则：\`rule.uuid(["v2"])\`
       */
      uu_2_nu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
       *
       * 运行时规则：\`rule.uuid(["v3"])\`
       */
      uu_3: UuidValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
       *
       * 运行时规则：\`rule.uuid(["v3"])\`
       */
      uu_3_nu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
       *
       * 运行时规则：\`rule.uuid(["v4"])\`
       */
      uu_4: UuidValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
       *
       * 运行时规则：\`rule.uuid(["v4"])\`
       */
      uu_4_nu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
       *
       * 运行时规则：\`rule.uuid(["v5"])\`
       */
      uu_5: UuidValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
       *
       * 运行时规则：\`rule.uuid(["v5"])\`
       */
      uu_5_nu: UuidValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
       *
       * 运行时规则：\`rule.string()\`
       */
      uu_6: StringValidator<string>;
      /**
       * Prisma类型：\`String?\`
       *
       * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
       *
       * 运行时规则：\`rule.string()\`
       */
      uu_6_nu: StringValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
       *
       * I am the comments
       */
      comme_ok: StringValidator<string>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      comme_fail: StringValidator<string>;
      /**
       * Prisma类型：\`DateTime\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.dateTime()\`
       */
      time: DateTimeValidator<Date>;
      /**
       * Prisma类型：\`DateTime?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.dateTime().nullable()\`
       */
      time_nu: DateTimeValidator<Date | null>;
      /**
       * Prisma类型：\`DateTime\`
       *
       * 数据库默认值：\`now()\`
       *
       * 运行时规则：\`rule.dateTime()\`
       */
      time_de: DateTimeValidator<Date>;
      /**
       * Prisma类型：\`Boolean\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.boolean()\`
       */
      boo: BooleanValidator<boolean>;
      /**
       * Prisma类型：\`Boolean?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.boolean().nullable()\`
       */
      boo_nu: BooleanValidator<boolean | null>;
      /**
       * Prisma类型：\`Boolean\`
       *
       * 数据库默认值：\`true\`
       *
       * 运行时规则：\`rule.boolean()\`
       */
      boo_de: BooleanValidator<boolean>;
      /**
       * Prisma类型：\`BigInt\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.bigint()\`
       */
      big: BigIntValidator<bigint>;
      /**
       * Prisma类型：\`BigInt?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.bigint().nullable()\`
       */
      big_nu: BigIntValidator<bigint | null>;
      /**
       * Prisma类型：\`BigInt\`
       *
       * 数据库默认值：\`"30"\`
       *
       * 运行时规则：\`rule.bigint()\`
       */
      big_de: BigIntValidator<bigint>;
      /**
       * Prisma类型：\`Bytes\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.buffer()\`
       */
      byt: BufferValidator<Buffer>;
      /**
       * Prisma类型：\`Bytes?\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.buffer().nullable()\`
       */
      byt_nu: BufferValidator<Buffer | null>;
      /**
       * Prisma类型：\`Bytes\`
       *
       * 数据库默认值：\`""\`
       *
       * 运行时规则：\`rule.buffer()\`
       */
      byt_de: BufferValidator<Buffer>;
    };
    /** 选择部分字段 */
    readonly pick: <
      Keys extends
        | "id"
        | "name"
        | "name_nu"
        | "name_de"
        | "age"
        | "age_nu"
        | "age_de"
        | "deci"
        | "deci_nu"
        | "deci_de"
        | "flo"
        | "flo_nu"
        | "flo_de"
        | "uu"
        | "uu_1"
        | "uu_1_nu"
        | "uu_2"
        | "uu_2_nu"
        | "uu_3"
        | "uu_3_nu"
        | "uu_4"
        | "uu_4_nu"
        | "uu_5"
        | "uu_5_nu"
        | "uu_6"
        | "uu_6_nu"
        | "comme_ok"
        | "comme_fail"
        | "time"
        | "time_nu"
        | "time_de"
        | "boo"
        | "boo_nu"
        | "boo_de"
        | "big"
        | "big_nu"
        | "big_de"
        | "byt"
        | "byt_nu"
        | "byt_de",
    >(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof userOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <
      Keys extends
        | "id"
        | "name"
        | "name_nu"
        | "name_de"
        | "age"
        | "age_nu"
        | "age_de"
        | "deci"
        | "deci_nu"
        | "deci_de"
        | "flo"
        | "flo_nu"
        | "flo_de"
        | "uu"
        | "uu_1"
        | "uu_1_nu"
        | "uu_2"
        | "uu_2_nu"
        | "uu_3"
        | "uu_3_nu"
        | "uu_4"
        | "uu_4_nu"
        | "uu_5"
        | "uu_5_nu"
        | "uu_6"
        | "uu_6_nu"
        | "comme_ok"
        | "comme_fail"
        | "time"
        | "time_nu"
        | "time_de"
        | "boo"
        | "boo_nu"
        | "boo_de"
        | "big"
        | "big_nu"
        | "big_de"
        | "byt"
        | "byt_nu"
        | "byt_de",
    >(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof userOutputColumns as K extends Keys
        ? never
        : K]: (typeof userOutputColumns)[K];
    };
  };
  readonly profile: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      user_id: IntValidator<number>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id" | "user_id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof profileOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id" | "user_id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof profileOutputColumns as K extends Keys
        ? never
        : K]: (typeof profileOutputColumns)[K];
    };
  };
  readonly post: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.int()\`
       */
      user_id: IntValidator<number>;
      /**
       * Prisma类型：\`String\`
       *
       * 数据库默认值：
       *
       * 运行时规则：\`rule.string()\`
       */
      name: StringValidator<string>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id" | "user_id" | "name">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof postOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id" | "user_id" | "name">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof postOutputColumns as K extends Keys
        ? never
        : K]: (typeof postOutputColumns)[K];
    };
  };
  readonly aliasTableName: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof aliasTableNameOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof aliasTableNameOutputColumns as K extends Keys
        ? never
        : K]: (typeof aliasTableNameOutputColumns)[K];
    };
  };
};
export {};
"
`;

exports[`transform sqlite > .js 1`] = `
"import { rule } from "@aomex/common";
function pick(obj, ...keys) {
  const subObj = {};
  for (const key of keys) {
    if (Object.hasOwn(obj, key)) {
      subObj[key] = obj[key];
    }
  }
  return subObj;
}
function omit(obj, ...keys) {
  return pick(obj, ...Object.keys(obj).filter((key) => !keys.includes(key)));
}
const userInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: rule.string(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  name_nu: rule.string().optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`"abc"\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  name_de: rule.string().optional(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  age: rule.int(),
  /**
   * Prisma类型：\`Int?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  age_nu: rule.int().optional(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  age_de: rule.int().optional(),
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  deci: rule.number(),
  /**
   * Prisma类型：\`Decimal?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  deci_nu: rule.number().optional(),
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  deci_de: rule.number().optional(),
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  flo: rule.number(),
  /**
   * Prisma类型：\`Float?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  flo_nu: rule.number().optional(),
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：\`100.10000000000001\`
   *
   * 运行时规则：\`rule.number().optional()\`
   */
  flo_de: rule.number().optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`uuid(4)\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu: rule.uuid(["v4"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"]).optional()\`
   */
  uu_1: rule.uuid(["v1"]).optional(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"]).optional()\`
   */
  uu_1_nu: rule.uuid(["v1"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"]).optional()\`
   */
  uu_2: rule.uuid(["v2"]).optional(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"]).optional()\`
   */
  uu_2_nu: rule.uuid(["v2"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"]).optional()\`
   */
  uu_3: rule.uuid(["v3"]).optional(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"]).optional()\`
   */
  uu_3_nu: rule.uuid(["v3"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu_4: rule.uuid(["v4"]).optional(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"]).optional()\`
   */
  uu_4_nu: rule.uuid(["v4"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"]).optional()\`
   */
  uu_5: rule.uuid(["v5"]).optional(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"]).optional()\`
   */
  uu_5_nu: rule.uuid(["v5"]).optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  uu_6: rule.string().optional(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string().optional()\`
   */
  uu_6_nu: rule.string().optional(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
   *
   * I am the comments
   */
  comme_ok: rule.string().docs({ description: "I am the comments" }),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  comme_fail: rule.string(),
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time: rule.dateTime(),
  /**
   * Prisma类型：\`DateTime?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime().optional()\`
   */
  time_nu: rule.dateTime().optional(),
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：\`now()\`
   *
   * 运行时规则：\`rule.dateTime().optional()\`
   */
  time_de: rule.dateTime().optional(),
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo: rule.boolean(),
  /**
   * Prisma类型：\`Boolean?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean().optional()\`
   */
  boo_nu: rule.boolean().optional(),
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：\`true\`
   *
   * 运行时规则：\`rule.boolean().optional()\`
   */
  boo_de: rule.boolean().optional(),
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big: rule.bigint(),
  /**
   * Prisma类型：\`BigInt?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint().optional()\`
   */
  big_nu: rule.bigint().optional(),
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：\`"30"\`
   *
   * 运行时规则：\`rule.bigint().optional()\`
   */
  big_de: rule.bigint().optional(),
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt: rule.buffer(),
  /**
   * Prisma类型：\`Bytes?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer().optional()\`
   */
  byt_nu: rule.buffer().optional(),
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：\`""\`
   *
   * 运行时规则：\`rule.buffer().optional()\`
   */
  byt_de: rule.buffer().optional(),
};
const userOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: rule.string(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().nullable()\`
   */
  name_nu: rule.string().nullable(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`"abc"\`
   *
   * 运行时规则：\`rule.string()\`
   */
  name_de: rule.string(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  age: rule.int(),
  /**
   * Prisma类型：\`Int?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int().nullable()\`
   */
  age_nu: rule.int().nullable(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.int()\`
   */
  age_de: rule.int(),
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  deci: rule.number(),
  /**
   * Prisma类型：\`Decimal?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().nullable()\`
   */
  deci_nu: rule.number().nullable(),
  /**
   * Prisma类型：\`Decimal\`
   *
   * 数据库默认值：\`100\`
   *
   * 运行时规则：\`rule.number()\`
   */
  deci_de: rule.number(),
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number()\`
   */
  flo: rule.number(),
  /**
   * Prisma类型：\`Float?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.number().nullable()\`
   */
  flo_nu: rule.number().nullable(),
  /**
   * Prisma类型：\`Float\`
   *
   * 数据库默认值：\`100.10000000000001\`
   *
   * 运行时规则：\`rule.number()\`
   */
  flo_de: rule.number(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`uuid(4)\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu: rule.uuid(["v4"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"])\`
   */
  uu_1: rule.uuid(["v1"]),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v1())\`
   *
   * 运行时规则：\`rule.uuid(["v1"])\`
   */
  uu_1_nu: rule.uuid(["v1"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"])\`
   */
  uu_2: rule.uuid(["v2"]),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v2())\`
   *
   * 运行时规则：\`rule.uuid(["v2"])\`
   */
  uu_2_nu: rule.uuid(["v2"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"])\`
   */
  uu_3: rule.uuid(["v3"]),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v3())\`
   *
   * 运行时规则：\`rule.uuid(["v3"])\`
   */
  uu_3_nu: rule.uuid(["v3"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu_4: rule.uuid(["v4"]),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v4())\`
   *
   * 运行时规则：\`rule.uuid(["v4"])\`
   */
  uu_4_nu: rule.uuid(["v4"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"])\`
   */
  uu_5: rule.uuid(["v5"]),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v5())\`
   *
   * 运行时规则：\`rule.uuid(["v5"])\`
   */
  uu_5_nu: rule.uuid(["v5"]),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string()\`
   */
  uu_6: rule.string(),
  /**
   * Prisma类型：\`String?\`
   *
   * 数据库默认值：\`dbgenerated(uuid_generate_v6())\`
   *
   * 运行时规则：\`rule.string()\`
   */
  uu_6_nu: rule.string(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string().docs({ description: "I am the comments" })\`
   *
   * I am the comments
   */
  comme_ok: rule.string().docs({ description: "I am the comments" }),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  comme_fail: rule.string(),
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time: rule.dateTime(),
  /**
   * Prisma类型：\`DateTime?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.dateTime().nullable()\`
   */
  time_nu: rule.dateTime().nullable(),
  /**
   * Prisma类型：\`DateTime\`
   *
   * 数据库默认值：\`now()\`
   *
   * 运行时规则：\`rule.dateTime()\`
   */
  time_de: rule.dateTime(),
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo: rule.boolean(),
  /**
   * Prisma类型：\`Boolean?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.boolean().nullable()\`
   */
  boo_nu: rule.boolean().nullable(),
  /**
   * Prisma类型：\`Boolean\`
   *
   * 数据库默认值：\`true\`
   *
   * 运行时规则：\`rule.boolean()\`
   */
  boo_de: rule.boolean(),
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big: rule.bigint(),
  /**
   * Prisma类型：\`BigInt?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.bigint().nullable()\`
   */
  big_nu: rule.bigint().nullable(),
  /**
   * Prisma类型：\`BigInt\`
   *
   * 数据库默认值：\`"30"\`
   *
   * 运行时规则：\`rule.bigint()\`
   */
  big_de: rule.bigint(),
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt: rule.buffer(),
  /**
   * Prisma类型：\`Bytes?\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.buffer().nullable()\`
   */
  byt_nu: rule.buffer().nullable(),
  /**
   * Prisma类型：\`Bytes\`
   *
   * 数据库默认值：\`""\`
   *
   * 运行时规则：\`rule.buffer()\`
   */
  byt_de: rule.buffer(),
};
const profileInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: rule.int(),
};
const profileOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: rule.int(),
};
const postInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: rule.int(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: rule.string(),
};
const postOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.int()\`
   */
  user_id: rule.int(),
  /**
   * Prisma类型：\`String\`
   *
   * 数据库默认值：
   *
   * 运行时规则：\`rule.string()\`
   */
  name: rule.string(),
};
const aliasTableNameInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
};
const aliasTableNameOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
};

export const prismaInput = {
  user: {
    /** 所有字段对象 */
    columns: userInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(userInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(userInputColumns, ...keys);
    },
  },
  profile: {
    /** 所有字段对象 */
    columns: profileInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(profileInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(profileInputColumns, ...keys);
    },
  },
  post: {
    /** 所有字段对象 */
    columns: postInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(postInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(postInputColumns, ...keys);
    },
  },
  aliasTableName: {
    /** 所有字段对象 */
    columns: aliasTableNameInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(aliasTableNameInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(aliasTableNameInputColumns, ...keys);
    },
  },
};

export const prismaOutput = {
  user: {
    /** 所有字段对象 */
    columns: userOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(userOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(userOutputColumns, ...keys);
    },
  },
  profile: {
    /** 所有字段对象 */
    columns: profileOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(profileOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(profileOutputColumns, ...keys);
    },
  },
  post: {
    /** 所有字段对象 */
    columns: postOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(postOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(postOutputColumns, ...keys);
    },
  },
  aliasTableName: {
    /** 所有字段对象 */
    columns: aliasTableNameOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(aliasTableNameOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(aliasTableNameOutputColumns, ...keys);
    },
  },
};
"
`;

exports[`transform table-name > .d.ts 1`] = `
"import { IntValidator, Validator } from "@aomex/common";
declare const lowercaseInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
};
declare const lowercaseOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
};
declare const uppercaseInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
};
declare const uppercaseOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
};
declare const camelCaseInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
};
declare const camelCaseOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
};
declare const pascalCaseInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
};
declare const pascalCaseOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
};
declare const titlecaseInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
};
declare const titlecaseOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
};
declare const snakeCaseInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
};
declare const snakeCaseOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
};
declare const completeCaseInputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: IntValidator<number | Validator.TOptional>;
};
declare const completeCaseOutputColumns: {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: IntValidator<number>;
};

export declare const prismaInput: {
  readonly lowercase: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof lowercaseInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof lowercaseInputColumns as K extends Keys
        ? never
        : K]: (typeof lowercaseInputColumns)[K];
    };
  };
  readonly uppercase: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof uppercaseInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof uppercaseInputColumns as K extends Keys
        ? never
        : K]: (typeof uppercaseInputColumns)[K];
    };
  };
  readonly camelCase: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof camelCaseInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof camelCaseInputColumns as K extends Keys
        ? never
        : K]: (typeof camelCaseInputColumns)[K];
    };
  };
  readonly pascalCase: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof pascalCaseInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof pascalCaseInputColumns as K extends Keys
        ? never
        : K]: (typeof pascalCaseInputColumns)[K];
    };
  };
  readonly titlecase: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof titlecaseInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof titlecaseInputColumns as K extends Keys
        ? never
        : K]: (typeof titlecaseInputColumns)[K];
    };
  };
  readonly snakeCase: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof snakeCaseInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof snakeCaseInputColumns as K extends Keys
        ? never
        : K]: (typeof snakeCaseInputColumns)[K];
    };
  };
  readonly completeCase: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int().optional()\`
       */
      id: IntValidator<number | Validator.TOptional>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof completeCaseInputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof completeCaseInputColumns as K extends Keys
        ? never
        : K]: (typeof completeCaseInputColumns)[K];
    };
  };
};

export declare const prismaOutput: {
  readonly lowercase: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof lowercaseOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof lowercaseOutputColumns as K extends Keys
        ? never
        : K]: (typeof lowercaseOutputColumns)[K];
    };
  };
  readonly uppercase: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof uppercaseOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof uppercaseOutputColumns as K extends Keys
        ? never
        : K]: (typeof uppercaseOutputColumns)[K];
    };
  };
  readonly camelCase: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof camelCaseOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof camelCaseOutputColumns as K extends Keys
        ? never
        : K]: (typeof camelCaseOutputColumns)[K];
    };
  };
  readonly pascalCase: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof pascalCaseOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof pascalCaseOutputColumns as K extends Keys
        ? never
        : K]: (typeof pascalCaseOutputColumns)[K];
    };
  };
  readonly titlecase: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof titlecaseOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof titlecaseOutputColumns as K extends Keys
        ? never
        : K]: (typeof titlecaseOutputColumns)[K];
    };
  };
  readonly snakeCase: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof snakeCaseOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof snakeCaseOutputColumns as K extends Keys
        ? never
        : K]: (typeof snakeCaseOutputColumns)[K];
    };
  };
  readonly completeCase: {
    /** 所有字段对象 */
    readonly columns: {
      /**
       * Prisma类型：\`Int\`
       *
       * 数据库默认值：\`autoincrement()\`
       *
       * 运行时规则：\`rule.int()\`
       */
      id: IntValidator<number>;
    };
    /** 选择部分字段 */
    readonly pick: <Keys extends "id">(
      ...keys: Keys[]
    ) => { [K in Keys]: (typeof completeCaseOutputColumns)[K] };
    /** 去除部分字段 */
    readonly omit: <Keys extends "id">(
      ...keys: Keys[]
    ) => {
      [K in keyof typeof completeCaseOutputColumns as K extends Keys
        ? never
        : K]: (typeof completeCaseOutputColumns)[K];
    };
  };
};
export {};
"
`;

exports[`transform table-name > .js 1`] = `
"import { rule } from "@aomex/common";
function pick(obj, ...keys) {
  const subObj = {};
  for (const key of keys) {
    if (Object.hasOwn(obj, key)) {
      subObj[key] = obj[key];
    }
  }
  return subObj;
}
function omit(obj, ...keys) {
  return pick(obj, ...Object.keys(obj).filter((key) => !keys.includes(key)));
}
const lowercaseInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
};
const lowercaseOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
};
const uppercaseInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
};
const uppercaseOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
};
const camelCaseInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
};
const camelCaseOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
};
const pascalCaseInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
};
const pascalCaseOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
};
const titlecaseInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
};
const titlecaseOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
};
const snakeCaseInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
};
const snakeCaseOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
};
const completeCaseInputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int().optional()\`
   */
  id: rule.int().optional(),
};
const completeCaseOutputColumns = {
  /**
   * Prisma类型：\`Int\`
   *
   * 数据库默认值：\`autoincrement()\`
   *
   * 运行时规则：\`rule.int()\`
   */
  id: rule.int(),
};

export const prismaInput = {
  lowercase: {
    /** 所有字段对象 */
    columns: lowercaseInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(lowercaseInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(lowercaseInputColumns, ...keys);
    },
  },
  uppercase: {
    /** 所有字段对象 */
    columns: uppercaseInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(uppercaseInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(uppercaseInputColumns, ...keys);
    },
  },
  camelCase: {
    /** 所有字段对象 */
    columns: camelCaseInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(camelCaseInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(camelCaseInputColumns, ...keys);
    },
  },
  pascalCase: {
    /** 所有字段对象 */
    columns: pascalCaseInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(pascalCaseInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(pascalCaseInputColumns, ...keys);
    },
  },
  titlecase: {
    /** 所有字段对象 */
    columns: titlecaseInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(titlecaseInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(titlecaseInputColumns, ...keys);
    },
  },
  snakeCase: {
    /** 所有字段对象 */
    columns: snakeCaseInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(snakeCaseInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(snakeCaseInputColumns, ...keys);
    },
  },
  completeCase: {
    /** 所有字段对象 */
    columns: completeCaseInputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(completeCaseInputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(completeCaseInputColumns, ...keys);
    },
  },
};

export const prismaOutput = {
  lowercase: {
    /** 所有字段对象 */
    columns: lowercaseOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(lowercaseOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(lowercaseOutputColumns, ...keys);
    },
  },
  uppercase: {
    /** 所有字段对象 */
    columns: uppercaseOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(uppercaseOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(uppercaseOutputColumns, ...keys);
    },
  },
  camelCase: {
    /** 所有字段对象 */
    columns: camelCaseOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(camelCaseOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(camelCaseOutputColumns, ...keys);
    },
  },
  pascalCase: {
    /** 所有字段对象 */
    columns: pascalCaseOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(pascalCaseOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(pascalCaseOutputColumns, ...keys);
    },
  },
  titlecase: {
    /** 所有字段对象 */
    columns: titlecaseOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(titlecaseOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(titlecaseOutputColumns, ...keys);
    },
  },
  snakeCase: {
    /** 所有字段对象 */
    columns: snakeCaseOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(snakeCaseOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(snakeCaseOutputColumns, ...keys);
    },
  },
  completeCase: {
    /** 所有字段对象 */
    columns: completeCaseOutputColumns,
    /** 选择部分字段 */
    pick: (...keys) => {
      return pick(completeCaseOutputColumns, ...keys);
    },
    /** 去除部分字段 */
    omit: (...keys) => {
      return omit(completeCaseOutputColumns, ...keys);
    },
  },
};
"
`;
